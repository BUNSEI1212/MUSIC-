{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst defaultOptions = {\n  fftSize: 2048,\n  smoothingTimeConstant: 0.8\n};\nexport function useAudioAnalyzer(options = {}) {\n  _s();\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // 状态\n  const [audioContext, setAudioContext] = useState(null);\n  const [audioSource, setAudioSource] = useState(null);\n  const [audioData, setAudioData] = useState({\n    waveform: new Float32Array(0),\n    frequencies: new Uint8Array(0),\n    amplitudes: new Uint8Array(0),\n    volume: 0,\n    ready: false\n  });\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioFile, setAudioFile] = useState(null);\n\n  // 引用\n  const audioRef = useRef(null);\n  const analyzerRef = useRef(null);\n  const animationFrameRef = useRef(null);\n\n  // 初始化音频上下文\n  useEffect(() => {\n    if (!audioContext) {\n      const context = new AudioContext();\n      setAudioContext(context);\n    }\n    return () => {\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n    };\n  }, [audioContext]);\n\n  // 设置音频元素\n  useEffect(() => {\n    if (!audioRef.current) {\n      const audio = new Audio();\n      audio.crossOrigin = 'anonymous';\n      audio.addEventListener('play', () => setIsPlaying(true));\n      audio.addEventListener('pause', () => setIsPlaying(false));\n      audio.addEventListener('ended', () => setIsPlaying(false));\n      audioRef.current = audio;\n    }\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current.src = '';\n      }\n    };\n  }, []);\n\n  // 加载音频文件\n  useEffect(() => {\n    if (audioRef.current && audioFile) {\n      audioRef.current.src = audioFile;\n      audioRef.current.load();\n    }\n  }, [audioFile]);\n\n  // 设置分析器\n  useEffect(() => {\n    if (audioContext && audioRef.current && !audioSource) {\n      const source = audioContext.createMediaElementSource(audioRef.current);\n      const analyzer = audioContext.createAnalyser();\n      analyzer.fftSize = opts.fftSize;\n      analyzer.smoothingTimeConstant = opts.smoothingTimeConstant;\n      source.connect(analyzer);\n      analyzer.connect(audioContext.destination);\n      setAudioSource(source);\n      analyzerRef.current = analyzer;\n\n      // 初始化数据数组\n      setAudioData(prev => ({\n        ...prev,\n        waveform: new Float32Array(analyzer.fftSize),\n        frequencies: new Uint8Array(analyzer.frequencyBinCount),\n        amplitudes: new Uint8Array(analyzer.frequencyBinCount),\n        ready: true\n      }));\n    }\n  }, [audioContext, audioSource, opts.fftSize, opts.smoothingTimeConstant]);\n\n  // 分析音频数据\n  useEffect(() => {\n    if (!analyzerRef.current || !audioData.ready || !isPlaying) {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n      return;\n    }\n    const analyzer = analyzerRef.current;\n    const waveform = new Float32Array(analyzer.fftSize);\n    const frequencies = new Uint8Array(analyzer.frequencyBinCount);\n    const amplitudes = new Uint8Array(analyzer.frequencyBinCount);\n    const updateData = () => {\n      analyzer.getFloatTimeDomainData(waveform);\n      analyzer.getByteFrequencyData(frequencies);\n      analyzer.getByteTimeDomainData(amplitudes);\n\n      // 计算音量\n      let sum = 0;\n      for (let i = 0; i < waveform.length; i++) {\n        sum += waveform[i] * waveform[i];\n      }\n      const volume = Math.sqrt(sum / waveform.length);\n      setAudioData({\n        waveform,\n        frequencies,\n        amplitudes,\n        volume,\n        ready: true\n      });\n      animationFrameRef.current = requestAnimationFrame(updateData);\n    };\n    animationFrameRef.current = requestAnimationFrame(updateData);\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    };\n  }, [audioData.ready, isPlaying]);\n\n  // 处理用户操作的函数\n  const loadAudio = file => {\n    const url = URL.createObjectURL(file);\n    setAudioFile(url);\n  };\n  const loadAudioFromUrl = url => {\n    setAudioFile(url);\n  };\n  const play = () => {\n    if (audioRef.current && audioContext) {\n      if (audioContext.state === 'suspended') {\n        audioContext.resume();\n      }\n      audioRef.current.play();\n    }\n  };\n  const pause = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  };\n  const stop = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n    }\n  };\n  const setVolume = volume => {\n    if (audioRef.current) {\n      audioRef.current.volume = Math.max(0, Math.min(1, volume));\n    }\n  };\n  const seek = time => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = time;\n    }\n  };\n  return {\n    audioData,\n    isPlaying,\n    audioRef,\n    loadAudio,\n    loadAudioFromUrl,\n    play,\n    pause,\n    stop,\n    setVolume,\n    seek\n  };\n}\n_s(useAudioAnalyzer, \"21lTkcwGeVLmLRgL+CZMimtLi4A=\");","map":{"version":3,"names":["useState","useEffect","useRef","defaultOptions","fftSize","smoothingTimeConstant","useAudioAnalyzer","options","_s","opts","audioContext","setAudioContext","audioSource","setAudioSource","audioData","setAudioData","waveform","Float32Array","frequencies","Uint8Array","amplitudes","volume","ready","isPlaying","setIsPlaying","audioFile","setAudioFile","audioRef","analyzerRef","animationFrameRef","context","AudioContext","state","close","current","audio","Audio","crossOrigin","addEventListener","pause","src","load","source","createMediaElementSource","analyzer","createAnalyser","connect","destination","prev","frequencyBinCount","cancelAnimationFrame","updateData","getFloatTimeDomainData","getByteFrequencyData","getByteTimeDomainData","sum","i","length","Math","sqrt","requestAnimationFrame","loadAudio","file","url","URL","createObjectURL","loadAudioFromUrl","play","resume","stop","currentTime","setVolume","max","min","seek","time"],"sources":["C:/Users/20213/Desktop/web/src/hooks/useAudioAnalyzer.ts"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport * as Tone from 'tone';\n\ninterface AudioAnalyzerOptions {\n  fftSize?: number;\n  smoothingTimeConstant?: number;\n}\n\ninterface AudioData {\n  waveform: Float32Array;\n  frequencies: Uint8Array;\n  amplitudes: Uint8Array;\n  volume: number;\n  ready: boolean;\n}\n\nconst defaultOptions: AudioAnalyzerOptions = {\n  fftSize: 2048,\n  smoothingTimeConstant: 0.8,\n};\n\nexport function useAudioAnalyzer(options: AudioAnalyzerOptions = {}) {\n  const opts = { ...defaultOptions, ...options };\n  \n  // 状态\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [audioSource, setAudioSource] = useState<MediaElementAudioSourceNode | null>(null);\n  const [audioData, setAudioData] = useState<AudioData>({\n    waveform: new Float32Array(0),\n    frequencies: new Uint8Array(0),\n    amplitudes: new Uint8Array(0),\n    volume: 0,\n    ready: false,\n  });\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioFile, setAudioFile] = useState<string | null>(null);\n  \n  // 引用\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const analyzerRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n  \n  // 初始化音频上下文\n  useEffect(() => {\n    if (!audioContext) {\n      const context = new AudioContext();\n      setAudioContext(context);\n    }\n    \n    return () => {\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n    };\n  }, [audioContext]);\n  \n  // 设置音频元素\n  useEffect(() => {\n    if (!audioRef.current) {\n      const audio = new Audio();\n      audio.crossOrigin = 'anonymous';\n      audio.addEventListener('play', () => setIsPlaying(true));\n      audio.addEventListener('pause', () => setIsPlaying(false));\n      audio.addEventListener('ended', () => setIsPlaying(false));\n      audioRef.current = audio;\n    }\n    \n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current.src = '';\n      }\n    };\n  }, []);\n  \n  // 加载音频文件\n  useEffect(() => {\n    if (audioRef.current && audioFile) {\n      audioRef.current.src = audioFile;\n      audioRef.current.load();\n    }\n  }, [audioFile]);\n  \n  // 设置分析器\n  useEffect(() => {\n    if (audioContext && audioRef.current && !audioSource) {\n      const source = audioContext.createMediaElementSource(audioRef.current);\n      const analyzer = audioContext.createAnalyser();\n      \n      analyzer.fftSize = opts.fftSize as number;\n      analyzer.smoothingTimeConstant = opts.smoothingTimeConstant as number;\n      \n      source.connect(analyzer);\n      analyzer.connect(audioContext.destination);\n      \n      setAudioSource(source);\n      analyzerRef.current = analyzer;\n      \n      // 初始化数据数组\n      setAudioData(prev => ({\n        ...prev,\n        waveform: new Float32Array(analyzer.fftSize),\n        frequencies: new Uint8Array(analyzer.frequencyBinCount),\n        amplitudes: new Uint8Array(analyzer.frequencyBinCount),\n        ready: true,\n      }));\n    }\n  }, [audioContext, audioSource, opts.fftSize, opts.smoothingTimeConstant]);\n  \n  // 分析音频数据\n  useEffect(() => {\n    if (!analyzerRef.current || !audioData.ready || !isPlaying) {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n      return;\n    }\n    \n    const analyzer = analyzerRef.current;\n    const waveform = new Float32Array(analyzer.fftSize);\n    const frequencies = new Uint8Array(analyzer.frequencyBinCount);\n    const amplitudes = new Uint8Array(analyzer.frequencyBinCount);\n    \n    const updateData = () => {\n      analyzer.getFloatTimeDomainData(waveform);\n      analyzer.getByteFrequencyData(frequencies);\n      analyzer.getByteTimeDomainData(amplitudes);\n      \n      // 计算音量\n      let sum = 0;\n      for (let i = 0; i < waveform.length; i++) {\n        sum += waveform[i] * waveform[i];\n      }\n      const volume = Math.sqrt(sum / waveform.length);\n      \n      setAudioData({\n        waveform,\n        frequencies,\n        amplitudes,\n        volume,\n        ready: true,\n      });\n      \n      animationFrameRef.current = requestAnimationFrame(updateData);\n    };\n    \n    animationFrameRef.current = requestAnimationFrame(updateData);\n    \n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    };\n  }, [audioData.ready, isPlaying]);\n  \n  // 处理用户操作的函数\n  const loadAudio = (file: File) => {\n    const url = URL.createObjectURL(file);\n    setAudioFile(url);\n  };\n  \n  const loadAudioFromUrl = (url: string) => {\n    setAudioFile(url);\n  };\n  \n  const play = () => {\n    if (audioRef.current && audioContext) {\n      if (audioContext.state === 'suspended') {\n        audioContext.resume();\n      }\n      audioRef.current.play();\n    }\n  };\n  \n  const pause = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  };\n  \n  const stop = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n    }\n  };\n  \n  const setVolume = (volume: number) => {\n    if (audioRef.current) {\n      audioRef.current.volume = Math.max(0, Math.min(1, volume));\n    }\n  };\n  \n  const seek = (time: number) => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = time;\n    }\n  };\n  \n  return {\n    audioData,\n    isPlaying,\n    audioRef,\n    loadAudio,\n    loadAudioFromUrl,\n    play,\n    pause,\n    stop,\n    setVolume,\n    seek,\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}