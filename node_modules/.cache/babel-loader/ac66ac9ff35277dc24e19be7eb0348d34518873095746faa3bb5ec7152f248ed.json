{"ast":null,"code":"// 定义创意视觉效果\nimport * as THREE from 'three';\n\n// 计算渐变色\nexport const getGradientColor = (color1, color2, percentage) => {\n  const r1 = parseInt(color1.slice(1, 3), 16);\n  const g1 = parseInt(color1.slice(3, 5), 16);\n  const b1 = parseInt(color1.slice(5, 7), 16);\n  const r2 = parseInt(color2.slice(1, 3), 16);\n  const g2 = parseInt(color2.slice(3, 5), 16);\n  const b2 = parseInt(color2.slice(5, 7), 16);\n  const r = Math.round(r1 + (r2 - r1) * percentage);\n  const g = Math.round(g1 + (g2 - g1) * percentage);\n  const b = Math.round(b1 + (b2 - b1) * percentage);\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};\n\n// 3D球体效果\nexport class SphereVisualizer {\n  constructor(canvas) {\n    this.scene = void 0;\n    this.camera = void 0;\n    this.renderer = void 0;\n    this.sphere = void 0;\n    this.material = void 0;\n    this.light = void 0;\n    this.rotationSpeed = void 0;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      canvas,\n      alpha: true\n    });\n    this.renderer.setSize(canvas.width, canvas.height);\n\n    // 创建球体\n    const geometry = new THREE.SphereGeometry(2, 32, 32);\n    this.material = new THREE.MeshPhongMaterial({\n      color: 0x1db954,\n      shininess: 100,\n      specular: 0x1ed760\n    });\n    this.sphere = new THREE.Mesh(geometry, this.material);\n    this.scene.add(this.sphere);\n\n    // 添加光源\n    this.light = new THREE.DirectionalLight(0xffffff, 1);\n    this.light.position.set(5, 5, 5);\n    this.scene.add(this.light);\n\n    // 设置相机位置\n    this.camera.position.z = 5;\n    this.rotationSpeed = 0.005;\n  }\n  draw(frequencies) {\n    // 计算平均频率\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const average = sum / frequencies.length;\n    const normalizedAverage = average / 255;\n\n    // 更新球体\n    this.sphere.rotation.x += this.rotationSpeed;\n    this.sphere.rotation.y += this.rotationSpeed;\n\n    // 根据音频数据调整球体\n    const scale = 1 + normalizedAverage * 0.5;\n    this.sphere.scale.set(scale, scale, scale);\n\n    // 更新材质颜色\n    const hue = Date.now() * 0.001 % 1;\n    const color = new THREE.Color().setHSL(hue, 0.7, 0.5);\n    this.material.color = color;\n\n    // 渲染场景\n    this.renderer.render(this.scene, this.camera);\n  }\n  dispose() {\n    this.renderer.dispose();\n    this.material.dispose();\n    this.sphere.geometry.dispose();\n  }\n}\n\n// 频谱瀑布效果\nexport class SpectrumWaterfall {\n  constructor(canvas) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.buffer = void 0;\n    this.bufferSize = void 0;\n    this.colors = void 0;\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.bufferSize = 100;\n    this.buffer = [];\n    this.colors = ['#1db954', '#1ed760'];\n  }\n  draw(frequencies) {\n    // 添加新的频谱数据到缓冲区\n    const newData = new Uint8Array(frequencies.length);\n    for (let i = 0; i < frequencies.length; i++) {\n      newData[i] = frequencies[i];\n    }\n    this.buffer.push(newData);\n    if (this.buffer.length > this.bufferSize) {\n      this.buffer.shift();\n    }\n\n    // 清除画布\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // 绘制瀑布效果\n    const barWidth = this.canvas.width / frequencies.length;\n    const barHeight = this.canvas.height / this.bufferSize;\n    for (let i = 0; i < this.buffer.length; i++) {\n      const spectrum = this.buffer[i];\n      for (let j = 0; j < spectrum.length; j++) {\n        const value = spectrum[j];\n        const normalizedValue = value / 255;\n        const color = getGradientColor(this.colors[0], this.colors[1], normalizedValue);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(j * barWidth, this.canvas.height - i * barHeight - barHeight, barWidth, barHeight);\n      }\n    }\n  }\n  dispose() {\n    this.buffer = [];\n  }\n}\n\n// 星空效果\nexport class Starfield {\n  constructor(canvas) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.stars = void 0;\n    this.colors = void 0;\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.colors = ['#1db954', '#1ed760'];\n    this.stars = this.createStars(200);\n  }\n  createStars(count) {\n    return Array.from({\n      length: count\n    }, () => ({\n      x: Math.random() * this.canvas.width,\n      y: Math.random() * this.canvas.height,\n      size: Math.random() * 2 + 1,\n      speed: Math.random() * 2 + 1,\n      brightness: Math.random()\n    }));\n  }\n  draw(frequencies) {\n    // 计算平均频率\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const average = sum / frequencies.length;\n    const normalizedAverage = average / 255;\n\n    // 清除画布\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // 更新和绘制星星\n    this.stars.forEach(star => {\n      // 更新位置\n      star.y += star.speed;\n      if (star.y > this.canvas.height) {\n        star.y = 0;\n        star.x = Math.random() * this.canvas.width;\n        star.size = Math.random() * 2 + 1;\n        star.speed = Math.random() * 2 + 1;\n        star.brightness = Math.random();\n      }\n\n      // 根据音频数据调整大小和亮度\n      const size = star.size * (1 + normalizedAverage * 0.5);\n      const brightness = star.brightness * (0.5 + normalizedAverage * 0.5);\n\n      // 绘制星星\n      this.ctx.beginPath();\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\n      const color = getGradientColor(this.colors[0], this.colors[1], brightness);\n      this.ctx.fillStyle = color;\n      this.ctx.fill();\n    });\n  }\n  dispose() {\n    this.stars = [];\n  }\n}","map":{"version":3,"names":["THREE","getGradientColor","color1","color2","percentage","r1","parseInt","slice","g1","b1","r2","g2","b2","r","Math","round","g","b","toString","padStart","SphereVisualizer","constructor","canvas","scene","camera","renderer","sphere","material","light","rotationSpeed","Scene","PerspectiveCamera","width","height","WebGLRenderer","alpha","setSize","geometry","SphereGeometry","MeshPhongMaterial","color","shininess","specular","Mesh","add","DirectionalLight","position","set","z","draw","frequencies","sum","i","length","average","normalizedAverage","rotation","x","y","scale","hue","Date","now","Color","setHSL","render","dispose","SpectrumWaterfall","ctx","buffer","bufferSize","colors","getContext","newData","Uint8Array","push","shift","clearRect","barWidth","barHeight","spectrum","j","value","normalizedValue","fillStyle","fillRect","Starfield","stars","createStars","count","Array","from","random","size","speed","brightness","forEach","star","beginPath","arc","PI","fill"],"sources":["C:/Users/20213/Desktop/web/src/utils/newVisualEffects.ts"],"sourcesContent":["// 定义创意视觉效果\r\nimport * as THREE from 'three';\r\n\r\n// 计算渐变色\r\nexport const getGradientColor = (color1: string, color2: string, percentage: number): string => {\r\n  const r1 = parseInt(color1.slice(1, 3), 16);\r\n  const g1 = parseInt(color1.slice(3, 5), 16);\r\n  const b1 = parseInt(color1.slice(5, 7), 16);\r\n\r\n  const r2 = parseInt(color2.slice(1, 3), 16);\r\n  const g2 = parseInt(color2.slice(3, 5), 16);\r\n  const b2 = parseInt(color2.slice(5, 7), 16);\r\n\r\n  const r = Math.round(r1 + (r2 - r1) * percentage);\r\n  const g = Math.round(g1 + (g2 - g1) * percentage);\r\n  const b = Math.round(b1 + (b2 - b1) * percentage);\r\n\r\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// 3D球体效果\r\nexport class SphereVisualizer {\r\n  private scene: THREE.Scene;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private renderer: THREE.WebGLRenderer;\r\n  private sphere: THREE.Mesh;\r\n  private material: THREE.MeshPhongMaterial;\r\n  private light: THREE.DirectionalLight;\r\n  private rotationSpeed: number;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.scene = new THREE.Scene();\r\n    this.camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);\r\n    this.renderer = new THREE.WebGLRenderer({ canvas, alpha: true });\r\n    this.renderer.setSize(canvas.width, canvas.height);\r\n\r\n    // 创建球体\r\n    const geometry = new THREE.SphereGeometry(2, 32, 32);\r\n    this.material = new THREE.MeshPhongMaterial({\r\n      color: 0x1db954,\r\n      shininess: 100,\r\n      specular: 0x1ed760,\r\n    });\r\n    this.sphere = new THREE.Mesh(geometry, this.material);\r\n    this.scene.add(this.sphere);\r\n\r\n    // 添加光源\r\n    this.light = new THREE.DirectionalLight(0xffffff, 1);\r\n    this.light.position.set(5, 5, 5);\r\n    this.scene.add(this.light);\r\n\r\n    // 设置相机位置\r\n    this.camera.position.z = 5;\r\n\r\n    this.rotationSpeed = 0.005;\r\n  }\r\n\r\n  draw(frequencies: Uint8Array) {\r\n    // 计算平均频率\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const average = sum / frequencies.length;\r\n    const normalizedAverage = average / 255;\r\n\r\n    // 更新球体\r\n    this.sphere.rotation.x += this.rotationSpeed;\r\n    this.sphere.rotation.y += this.rotationSpeed;\r\n\r\n    // 根据音频数据调整球体\r\n    const scale = 1 + normalizedAverage * 0.5;\r\n    this.sphere.scale.set(scale, scale, scale);\r\n\r\n    // 更新材质颜色\r\n    const hue = (Date.now() * 0.001) % 1;\r\n    const color = new THREE.Color().setHSL(hue, 0.7, 0.5);\r\n    this.material.color = color;\r\n\r\n    // 渲染场景\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  dispose() {\r\n    this.renderer.dispose();\r\n    this.material.dispose();\r\n    this.sphere.geometry.dispose();\r\n  }\r\n}\r\n\r\n// 频谱瀑布效果\r\nexport class SpectrumWaterfall {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private buffer: Uint8Array[];\r\n  private bufferSize: number;\r\n  private colors: string[];\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    this.bufferSize = 100;\r\n    this.buffer = [];\r\n    this.colors = ['#1db954', '#1ed760'];\r\n  }\r\n\r\n  draw(frequencies: Uint8Array) {\r\n    // 添加新的频谱数据到缓冲区\r\n    const newData = new Uint8Array(frequencies.length);\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      newData[i] = frequencies[i];\r\n    }\r\n    this.buffer.push(newData);\r\n    \r\n    if (this.buffer.length > this.bufferSize) {\r\n      this.buffer.shift();\r\n    }\r\n\r\n    // 清除画布\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    // 绘制瀑布效果\r\n    const barWidth = this.canvas.width / frequencies.length;\r\n    const barHeight = this.canvas.height / this.bufferSize;\r\n\r\n    for (let i = 0; i < this.buffer.length; i++) {\r\n      const spectrum = this.buffer[i];\r\n      for (let j = 0; j < spectrum.length; j++) {\r\n        const value = spectrum[j];\r\n        const normalizedValue = value / 255;\r\n        const color = getGradientColor(this.colors[0], this.colors[1], normalizedValue);\r\n\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fillRect(\r\n          j * barWidth,\r\n          this.canvas.height - i * barHeight - barHeight,\r\n          barWidth,\r\n          barHeight\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    this.buffer = [];\r\n  }\r\n}\r\n\r\n// 星空效果\r\nexport class Starfield {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private stars: Array<{\r\n    x: number;\r\n    y: number;\r\n    size: number;\r\n    speed: number;\r\n    brightness: number;\r\n  }>;\r\n  private colors: string[];\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    this.colors = ['#1db954', '#1ed760'];\r\n    this.stars = this.createStars(200);\r\n  }\r\n\r\n  private createStars(count: number) {\r\n    return Array.from({ length: count }, () => ({\r\n      x: Math.random() * this.canvas.width,\r\n      y: Math.random() * this.canvas.height,\r\n      size: Math.random() * 2 + 1,\r\n      speed: Math.random() * 2 + 1,\r\n      brightness: Math.random(),\r\n    }));\r\n  }\r\n\r\n  draw(frequencies: Uint8Array) {\r\n    // 计算平均频率\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const average = sum / frequencies.length;\r\n    const normalizedAverage = average / 255;\r\n\r\n    // 清除画布\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    // 更新和绘制星星\r\n    this.stars.forEach(star => {\r\n      // 更新位置\r\n      star.y += star.speed;\r\n      if (star.y > this.canvas.height) {\r\n        star.y = 0;\r\n        star.x = Math.random() * this.canvas.width;\r\n        star.size = Math.random() * 2 + 1;\r\n        star.speed = Math.random() * 2 + 1;\r\n        star.brightness = Math.random();\r\n      }\r\n\r\n      // 根据音频数据调整大小和亮度\r\n      const size = star.size * (1 + normalizedAverage * 0.5);\r\n      const brightness = star.brightness * (0.5 + normalizedAverage * 0.5);\r\n\r\n      // 绘制星星\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\r\n      const color = getGradientColor(this.colors[0], this.colors[1], brightness);\r\n      this.ctx.fillStyle = color;\r\n      this.ctx.fill();\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    this.stars = [];\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}