{"ast":null,"code":"// 定义创意视觉效果\n\nimport * as THREE from 'three';\nimport { getGradientColor } from './visualEffects';\n\n// 3D球体效果\n\nexport class SphereVisualizer {\n  constructor(container, options = {}) {\n    this.scene = void 0;\n    this.camera = void 0;\n    this.renderer = void 0;\n    this.sphere = void 0;\n    this.geometry = void 0;\n    this.options = void 0;\n    this.originalPositions = void 0;\n    this.rotating = true;\n    this.options = {\n      startColor: options.startColor || '#9c27b0',\n      endColor: options.endColor || '#3f51b5',\n      detail: options.detail || 4,\n      distortFactor: options.distortFactor || 0.3\n    };\n\n    // 创建THREE.js场景\n    this.scene = new THREE.Scene();\n\n    // 创建相机\n    this.camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    this.camera.position.z = 2.5;\n\n    // 创建渲染器\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(container.clientWidth, container.clientHeight);\n    container.appendChild(this.renderer.domElement);\n\n    // 创建球体几何体\n    this.geometry = new THREE.IcosahedronGeometry(1, this.options.detail);\n\n    // 保存原始顶点位置\n    this.originalPositions = new Float32Array(this.geometry.attributes.position.array);\n\n    // 创建材质\n    const material = new THREE.MeshPhongMaterial({\n      color: this.options.startColor,\n      wireframe: false,\n      shininess: 100,\n      emissive: '#111',\n      specular: '#fff'\n    });\n\n    // 创建网格\n    this.sphere = new THREE.Mesh(this.geometry, material);\n    this.scene.add(this.sphere);\n\n    // 添加灯光\n    const light1 = new THREE.DirectionalLight(0xffffff, 1);\n    light1.position.set(1, 1, 1);\n    this.scene.add(light1);\n    const light2 = new THREE.DirectionalLight(0xffffff, 0.5);\n    light2.position.set(-1, -1, -1);\n    this.scene.add(light2);\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\n    this.scene.add(ambientLight);\n\n    // 自适应调整大小\n    window.addEventListener('resize', () => {\n      this.camera.aspect = container.clientWidth / container.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(container.clientWidth, container.clientHeight);\n    });\n  }\n  update(frequencies) {\n    if (!this.sphere) return;\n\n    // 计算平均音量\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const avgVolume = sum / frequencies.length / 255;\n\n    // 扭曲球体\n    const positions = this.geometry.attributes.position.array;\n    for (let i = 0; i < positions.length; i += 3) {\n      const freqIndex = Math.floor(i / positions.length * frequencies.length);\n      const frequency = frequencies[freqIndex] / 255;\n\n      // 使用原始位置和音频数据来扭曲顶点\n      positions[i] = this.originalPositions[i] * (1 + frequency * this.options.distortFactor);\n      positions[i + 1] = this.originalPositions[i + 1] * (1 + frequency * this.options.distortFactor);\n      positions[i + 2] = this.originalPositions[i + 2] * (1 + frequency * this.options.distortFactor);\n    }\n    this.geometry.attributes.position.needsUpdate = true;\n\n    // 根据音量更新材质颜色\n    const sphereMaterial = this.sphere.material;\n    sphereMaterial.color.set(getGradientColor(this.options.startColor, this.options.endColor, avgVolume));\n    sphereMaterial.emissiveIntensity = avgVolume * 0.5;\n\n    // 旋转球体\n    if (this.rotating) {\n      this.sphere.rotation.x += 0.005;\n      this.sphere.rotation.y += 0.01;\n    }\n\n    // 渲染场景\n    this.renderer.render(this.scene, this.camera);\n  }\n  resize(width, height) {\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n  }\n  destroy() {\n    // 移除渲染器\n    if (this.renderer && this.renderer.domElement.parentNode) {\n      this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);\n    }\n\n    // 释放资源\n    this.geometry.dispose();\n    this.sphere.material.dispose();\n\n    // 移除事件监听器\n    window.removeEventListener('resize', this.resize);\n  }\n}\n\n// 频谱瀑布效果\n\nexport class SpectrumWaterfall {\n  constructor(canvas, options = {}) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.options = void 0;\n    this.history = [];\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.options = {\n      startColor: options.startColor || '#9c27b0',\n      endColor: options.endColor || '#3f51b5',\n      fadeSpeed: options.fadeSpeed || 0.05,\n      maxHistory: options.maxHistory || 100\n    };\n  }\n  update(frequencies) {\n    // 添加当前频谱数据到历史记录\n    this.history.unshift(new Uint8Array(frequencies));\n\n    // 限制历史记录长度\n    if (this.history.length > this.options.maxHistory) {\n      this.history.pop();\n    }\n\n    // 清除画布\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // 计算每条历史记录的高度\n    const rowHeight = this.canvas.height / this.options.maxHistory;\n\n    // 绘制历史频谱\n    this.history.forEach((freqs, index) => {\n      const y = index * rowHeight;\n\n      // 绘制频谱行\n      const barWidth = this.canvas.width / freqs.length;\n      for (let i = 0; i < freqs.length; i++) {\n        const value = freqs[i] / 255;\n        const x = i * barWidth;\n\n        // 根据值和行索引计算颜色\n        const fadeAlpha = 1 - index / this.options.maxHistory;\n        const color = getGradientColor(this.options.startColor, this.options.endColor, value);\n\n        // 设置颜色和透明度\n        this.ctx.fillStyle = color;\n        this.ctx.globalAlpha = fadeAlpha;\n\n        // 绘制矩形\n        this.ctx.fillRect(x, y, barWidth, rowHeight);\n      }\n    });\n\n    // 重置透明度\n    this.ctx.globalAlpha = 1;\n  }\n  resize(width, height) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n  }\n}\n\n// 星空效果\n\nexport class Starfield {\n  constructor(canvas, options = {}) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.stars = [];\n    this.options = void 0;\n    this.rotation = 0;\n    this.centerX = void 0;\n    this.centerY = void 0;\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.options = {\n      starCount: options.starCount || 200,\n      startColor: options.startColor || '#9c27b0',\n      endColor: options.endColor || '#3f51b5',\n      maxSpeed: options.maxSpeed || 1.5,\n      minSize: options.minSize || 1,\n      maxSize: options.maxSize || 3\n    };\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n\n    // 初始化星星\n    this.initStars();\n\n    // 监听画布大小变化\n    window.addEventListener('resize', () => this.handleResize());\n  }\n  initStars() {\n    this.stars = [];\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n    const maxRadius = Math.sqrt(Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)) / 2;\n    for (let i = 0; i < this.options.starCount; i++) {\n      // 随机角度和距离中心的半径\n      const angle = Math.random() * Math.PI * 2;\n      const radius = Math.random() * maxRadius;\n\n      // 计算坐标\n      const x = this.centerX + Math.cos(angle) * radius;\n      const y = this.centerY + Math.sin(angle) * radius;\n\n      // 创建星星\n      this.stars.push({\n        x,\n        y,\n        size: this.options.minSize + Math.random() * (this.options.maxSize - this.options.minSize),\n        color: getGradientColor(this.options.startColor, this.options.endColor, Math.random()),\n        speed: (0.1 + Math.random() * this.options.maxSpeed) * (radius / maxRadius),\n        brightness: 0.2 + Math.random() * 0.8,\n        pulseFactor: 0.5 + Math.random() * 0.5\n      });\n    }\n  }\n  update(frequencies) {\n    // 计算平均音量\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const avgVolume = sum / frequencies.length / 255;\n\n    // 清除画布\n    this.ctx.fillStyle = '#000';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // 根据音量调整旋转速度\n    this.rotation += 0.001 + avgVolume * 0.01;\n\n    // 更新和绘制星星\n    this.stars.forEach((star, index) => {\n      // 获取对应频率带的值\n      const freqIndex = Math.floor(index / this.stars.length * frequencies.length);\n      const frequency = frequencies[freqIndex] / 255;\n\n      // 计算到中心的距离\n      const dx = star.x - this.centerX;\n      const dy = star.y - this.centerY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // 旋转星星\n      const angle = Math.atan2(dy, dx) + this.rotation * star.speed;\n      const newDistance = distance + avgVolume * 20 * star.pulseFactor - 10;\n\n      // 更新位置\n      star.x = this.centerX + Math.cos(angle) * newDistance;\n      star.y = this.centerY + Math.sin(angle) * newDistance;\n\n      // 如果星星离开画布，重置它\n      if (star.x < 0 || star.x > this.canvas.width || star.y < 0 || star.y > this.canvas.height) {\n        const newAngle = Math.random() * Math.PI * 2;\n        const maxRadius = Math.sqrt(Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)) / 2;\n        const newRadius = Math.random() * maxRadius;\n        star.x = this.centerX + Math.cos(newAngle) * newRadius;\n        star.y = this.centerY + Math.sin(newAngle) * newRadius;\n      }\n\n      // 根据频率和音量调整大小和亮度\n      const brightness = star.brightness + frequency * 0.5;\n      const size = star.size * (1 + frequency * 2);\n\n      // 绘制星星\n      this.ctx.fillStyle = star.color;\n      this.ctx.globalAlpha = brightness;\n      this.ctx.beginPath();\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      // 绘制光芒\n      if (frequency > 0.6) {\n        this.ctx.globalAlpha = brightness * 0.4;\n        this.ctx.beginPath();\n        this.ctx.arc(star.x, star.y, size * 2, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    });\n\n    // 重置透明度\n    this.ctx.globalAlpha = 1;\n  }\n  handleResize() {\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n  }\n  resize(width, height) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.initStars();\n  }\n}","map":{"version":3,"names":["THREE","getGradientColor","SphereVisualizer","constructor","container","options","scene","camera","renderer","sphere","geometry","originalPositions","rotating","startColor","endColor","detail","distortFactor","Scene","PerspectiveCamera","clientWidth","clientHeight","position","z","WebGLRenderer","antialias","alpha","setSize","appendChild","domElement","IcosahedronGeometry","Float32Array","attributes","array","material","MeshPhongMaterial","color","wireframe","shininess","emissive","specular","Mesh","add","light1","DirectionalLight","set","light2","ambientLight","AmbientLight","window","addEventListener","aspect","updateProjectionMatrix","update","frequencies","sum","i","length","avgVolume","positions","freqIndex","Math","floor","frequency","needsUpdate","sphereMaterial","emissiveIntensity","rotation","x","y","render","resize","width","height","destroy","parentNode","removeChild","dispose","removeEventListener","SpectrumWaterfall","canvas","ctx","history","getContext","fadeSpeed","maxHistory","unshift","Uint8Array","pop","clearRect","rowHeight","forEach","freqs","index","barWidth","value","fadeAlpha","fillStyle","globalAlpha","fillRect","Starfield","stars","centerX","centerY","starCount","maxSpeed","minSize","maxSize","initStars","handleResize","maxRadius","sqrt","pow","angle","random","PI","radius","cos","sin","push","size","speed","brightness","pulseFactor","star","dx","dy","distance","atan2","newDistance","newAngle","newRadius","beginPath","arc","fill"],"sources":["C:/Users/20213/Desktop/web/src/utils/newVisualEffects.ts"],"sourcesContent":["// 定义创意视觉效果\r\n\r\nimport * as THREE from 'three';\r\nimport { getGradientColor } from './visualEffects';\r\n\r\n// 3D球体效果\r\nexport interface SphereVisualizerOptions {\r\n  startColor?: string;\r\n  endColor?: string;\r\n  detail?: number;\r\n  distortFactor?: number;\r\n}\r\n\r\nexport class SphereVisualizer {\r\n  private scene: THREE.Scene;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private renderer: THREE.WebGLRenderer;\r\n  private sphere: THREE.Mesh;\r\n  private geometry: THREE.IcosahedronGeometry;\r\n  private options: Required<SphereVisualizerOptions>;\r\n  private originalPositions: Float32Array;\r\n  private rotating: boolean = true;\r\n\r\n  constructor(container: HTMLElement, options: SphereVisualizerOptions = {}) {\r\n    this.options = {\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      detail: options.detail || 4,\r\n      distortFactor: options.distortFactor || 0.3\r\n    };\r\n\r\n    // 创建THREE.js场景\r\n    this.scene = new THREE.Scene();\r\n    \r\n    // 创建相机\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      75, \r\n      container.clientWidth / container.clientHeight, \r\n      0.1, \r\n      1000\r\n    );\r\n    this.camera.position.z = 2.5;\r\n    \r\n    // 创建渲染器\r\n    this.renderer = new THREE.WebGLRenderer({ \r\n      antialias: true,\r\n      alpha: true \r\n    });\r\n    this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n    container.appendChild(this.renderer.domElement);\r\n    \r\n    // 创建球体几何体\r\n    this.geometry = new THREE.IcosahedronGeometry(1, this.options.detail);\r\n    \r\n    // 保存原始顶点位置\r\n    this.originalPositions = new Float32Array(this.geometry.attributes.position.array);\r\n    \r\n    // 创建材质\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: this.options.startColor,\r\n      wireframe: false,\r\n      shininess: 100,\r\n      emissive: '#111',\r\n      specular: '#fff'\r\n    });\r\n    \r\n    // 创建网格\r\n    this.sphere = new THREE.Mesh(this.geometry, material);\r\n    this.scene.add(this.sphere);\r\n    \r\n    // 添加灯光\r\n    const light1 = new THREE.DirectionalLight(0xffffff, 1);\r\n    light1.position.set(1, 1, 1);\r\n    this.scene.add(light1);\r\n    \r\n    const light2 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    light2.position.set(-1, -1, -1);\r\n    this.scene.add(light2);\r\n    \r\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\r\n    this.scene.add(ambientLight);\r\n    \r\n    // 自适应调整大小\r\n    window.addEventListener('resize', () => {\r\n      this.camera.aspect = container.clientWidth / container.clientHeight;\r\n      this.camera.updateProjectionMatrix();\r\n      this.renderer.setSize(container.clientWidth, container.clientHeight);\r\n    });\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    if (!this.sphere) return;\r\n    \r\n    // 计算平均音量\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const avgVolume = sum / frequencies.length / 255;\r\n    \r\n    // 扭曲球体\r\n    const positions = this.geometry.attributes.position.array as Float32Array;\r\n    \r\n    for (let i = 0; i < positions.length; i += 3) {\r\n      const freqIndex = Math.floor((i / positions.length) * frequencies.length);\r\n      const frequency = frequencies[freqIndex] / 255;\r\n      \r\n      // 使用原始位置和音频数据来扭曲顶点\r\n      positions[i] = this.originalPositions[i] * (1 + frequency * this.options.distortFactor);\r\n      positions[i + 1] = this.originalPositions[i + 1] * (1 + frequency * this.options.distortFactor);\r\n      positions[i + 2] = this.originalPositions[i + 2] * (1 + frequency * this.options.distortFactor);\r\n    }\r\n    \r\n    this.geometry.attributes.position.needsUpdate = true;\r\n    \r\n    // 根据音量更新材质颜色\r\n    const sphereMaterial = this.sphere.material as THREE.MeshPhongMaterial;\r\n    sphereMaterial.color.set(getGradientColor(\r\n      this.options.startColor, \r\n      this.options.endColor, \r\n      avgVolume\r\n    ));\r\n    sphereMaterial.emissiveIntensity = avgVolume * 0.5;\r\n    \r\n    // 旋转球体\r\n    if (this.rotating) {\r\n      this.sphere.rotation.x += 0.005;\r\n      this.sphere.rotation.y += 0.01;\r\n    }\r\n    \r\n    // 渲染场景\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.camera.aspect = width / height;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(width, height);\r\n  }\r\n  \r\n  destroy(): void {\r\n    // 移除渲染器\r\n    if (this.renderer && this.renderer.domElement.parentNode) {\r\n      this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);\r\n    }\r\n    \r\n    // 释放资源\r\n    this.geometry.dispose();\r\n    (this.sphere.material as THREE.Material).dispose();\r\n    \r\n    // 移除事件监听器\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n}\r\n\r\n// 频谱瀑布效果\r\nexport interface WaterfallOptions {\r\n  startColor?: string;\r\n  endColor?: string;\r\n  fadeSpeed?: number;\r\n  maxHistory?: number;\r\n}\r\n\r\nexport class SpectrumWaterfall {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private options: Required<WaterfallOptions>;\r\n  private history: Uint8Array[] = [];\r\n  \r\n  constructor(canvas: HTMLCanvasElement, options: WaterfallOptions = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    \r\n    this.options = {\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      fadeSpeed: options.fadeSpeed || 0.05,\r\n      maxHistory: options.maxHistory || 100\r\n    };\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    // 添加当前频谱数据到历史记录\r\n    this.history.unshift(new Uint8Array(frequencies));\r\n    \r\n    // 限制历史记录长度\r\n    if (this.history.length > this.options.maxHistory) {\r\n      this.history.pop();\r\n    }\r\n    \r\n    // 清除画布\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // 计算每条历史记录的高度\r\n    const rowHeight = this.canvas.height / this.options.maxHistory;\r\n    \r\n    // 绘制历史频谱\r\n    this.history.forEach((freqs, index) => {\r\n      const y = index * rowHeight;\r\n      \r\n      // 绘制频谱行\r\n      const barWidth = this.canvas.width / freqs.length;\r\n      \r\n      for (let i = 0; i < freqs.length; i++) {\r\n        const value = freqs[i] / 255;\r\n        const x = i * barWidth;\r\n        \r\n        // 根据值和行索引计算颜色\r\n        const fadeAlpha = 1 - (index / this.options.maxHistory);\r\n        const color = getGradientColor(\r\n          this.options.startColor, \r\n          this.options.endColor, \r\n          value\r\n        );\r\n        \r\n        // 设置颜色和透明度\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.globalAlpha = fadeAlpha;\r\n        \r\n        // 绘制矩形\r\n        this.ctx.fillRect(x, y, barWidth, rowHeight);\r\n      }\r\n    });\r\n    \r\n    // 重置透明度\r\n    this.ctx.globalAlpha = 1;\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n  }\r\n}\r\n\r\n// 星空效果\r\nexport interface Star {\r\n  x: number;\r\n  y: number;\r\n  size: number;\r\n  color: string;\r\n  speed: number;\r\n  brightness: number;\r\n  pulseFactor: number;\r\n}\r\n\r\nexport interface StarfieldOptions {\r\n  starCount?: number;\r\n  startColor?: string;\r\n  endColor?: string;\r\n  maxSpeed?: number;\r\n  minSize?: number;\r\n  maxSize?: number;\r\n}\r\n\r\nexport class Starfield {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private stars: Star[] = [];\r\n  private options: Required<StarfieldOptions>;\r\n  private rotation: number = 0;\r\n  private centerX: number;\r\n  private centerY: number;\r\n  \r\n  constructor(canvas: HTMLCanvasElement, options: StarfieldOptions = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    \r\n    this.options = {\r\n      starCount: options.starCount || 200,\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      maxSpeed: options.maxSpeed || 1.5,\r\n      minSize: options.minSize || 1,\r\n      maxSize: options.maxSize || 3\r\n    };\r\n    \r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n    \r\n    // 初始化星星\r\n    this.initStars();\r\n    \r\n    // 监听画布大小变化\r\n    window.addEventListener('resize', () => this.handleResize());\r\n  }\r\n  \r\n  private initStars(): void {\r\n    this.stars = [];\r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n    \r\n    const maxRadius = Math.sqrt(\r\n      Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)\r\n    ) / 2;\r\n    \r\n    for (let i = 0; i < this.options.starCount; i++) {\r\n      // 随机角度和距离中心的半径\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const radius = Math.random() * maxRadius;\r\n      \r\n      // 计算坐标\r\n      const x = this.centerX + Math.cos(angle) * radius;\r\n      const y = this.centerY + Math.sin(angle) * radius;\r\n      \r\n      // 创建星星\r\n      this.stars.push({\r\n        x,\r\n        y,\r\n        size: this.options.minSize + Math.random() * (this.options.maxSize - this.options.minSize),\r\n        color: getGradientColor(\r\n          this.options.startColor, \r\n          this.options.endColor, \r\n          Math.random()\r\n        ),\r\n        speed: (0.1 + Math.random() * this.options.maxSpeed) * (radius / maxRadius),\r\n        brightness: 0.2 + Math.random() * 0.8,\r\n        pulseFactor: 0.5 + Math.random() * 0.5,\r\n      });\r\n    }\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    // 计算平均音量\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const avgVolume = sum / frequencies.length / 255;\r\n    \r\n    // 清除画布\r\n    this.ctx.fillStyle = '#000';\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // 根据音量调整旋转速度\r\n    this.rotation += 0.001 + avgVolume * 0.01;\r\n    \r\n    // 更新和绘制星星\r\n    this.stars.forEach((star, index) => {\r\n      // 获取对应频率带的值\r\n      const freqIndex = Math.floor((index / this.stars.length) * frequencies.length);\r\n      const frequency = frequencies[freqIndex] / 255;\r\n      \r\n      // 计算到中心的距离\r\n      const dx = star.x - this.centerX;\r\n      const dy = star.y - this.centerY;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      // 旋转星星\r\n      const angle = Math.atan2(dy, dx) + this.rotation * star.speed;\r\n      const newDistance = distance + (avgVolume * 20 * star.pulseFactor) - 10;\r\n      \r\n      // 更新位置\r\n      star.x = this.centerX + Math.cos(angle) * newDistance;\r\n      star.y = this.centerY + Math.sin(angle) * newDistance;\r\n      \r\n      // 如果星星离开画布，重置它\r\n      if (\r\n        star.x < 0 || \r\n        star.x > this.canvas.width || \r\n        star.y < 0 || \r\n        star.y > this.canvas.height\r\n      ) {\r\n        const newAngle = Math.random() * Math.PI * 2;\r\n        const maxRadius = Math.sqrt(\r\n          Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)\r\n        ) / 2;\r\n        const newRadius = Math.random() * maxRadius;\r\n        \r\n        star.x = this.centerX + Math.cos(newAngle) * newRadius;\r\n        star.y = this.centerY + Math.sin(newAngle) * newRadius;\r\n      }\r\n      \r\n      // 根据频率和音量调整大小和亮度\r\n      const brightness = star.brightness + frequency * 0.5;\r\n      const size = star.size * (1 + frequency * 2);\r\n      \r\n      // 绘制星星\r\n      this.ctx.fillStyle = star.color;\r\n      this.ctx.globalAlpha = brightness;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n      \r\n      // 绘制光芒\r\n      if (frequency > 0.6) {\r\n        this.ctx.globalAlpha = brightness * 0.4;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(star.x, star.y, size * 2, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n      }\r\n    });\r\n    \r\n    // 重置透明度\r\n    this.ctx.globalAlpha = 1;\r\n  }\r\n  \r\n  handleResize(): void {\r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.initStars();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}