{"ast":null,"code":"// 定义创意视觉效果\n\nimport * as THREE from 'three';\n\n// 计算渐变色\nexport const getGradientColor = (color1, color2, percentage) => {\n  const r1 = parseInt(color1.slice(1, 3), 16);\n  const g1 = parseInt(color1.slice(3, 5), 16);\n  const b1 = parseInt(color1.slice(5, 7), 16);\n  const r2 = parseInt(color2.slice(1, 3), 16);\n  const g2 = parseInt(color2.slice(3, 5), 16);\n  const b2 = parseInt(color2.slice(5, 7), 16);\n  const r = Math.round(r1 + (r2 - r1) * percentage);\n  const g = Math.round(g1 + (g2 - g1) * percentage);\n  const b = Math.round(b1 + (b2 - b1) * percentage);\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};\n\n// 3D球体效果\n\nexport class SphereVisualizer {\n  constructor(canvas) {\n    this.scene = void 0;\n    this.camera = void 0;\n    this.renderer = void 0;\n    this.sphere = void 0;\n    this.geometry = void 0;\n    this.options = void 0;\n    this.originalPositions = void 0;\n    this.rotating = true;\n    this.material = void 0;\n    this.light = void 0;\n    this.rotationSpeed = void 0;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      canvas,\n      alpha: true\n    });\n    this.renderer.setSize(canvas.width, canvas.height);\n\n    // 创建球体\n    const geometry = new THREE.SphereGeometry(2, 32, 32);\n    this.material = new THREE.MeshPhongMaterial({\n      color: 0x1db954,\n      shininess: 100,\n      specular: 0x1ed760\n    });\n    this.sphere = new THREE.Mesh(geometry, this.material);\n    this.scene.add(this.sphere);\n\n    // 添加光源\n    this.light = new THREE.DirectionalLight(0xffffff, 1);\n    this.light.position.set(5, 5, 5);\n    this.scene.add(this.light);\n\n    // 设置相机位置\n    this.camera.position.z = 5;\n    this.rotationSpeed = 0.005;\n  }\n  draw(frequencies) {\n    // 计算平均频率\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const average = sum / frequencies.length;\n    const normalizedAverage = average / 255;\n\n    // 更新球体\n    this.sphere.rotation.x += this.rotationSpeed;\n    this.sphere.rotation.y += this.rotationSpeed;\n\n    // 根据音频数据调整球体\n    const scale = 1 + normalizedAverage * 0.5;\n    this.sphere.scale.set(scale, scale, scale);\n\n    // 更新材质颜色\n    const hue = Date.now() * 0.001 % 1;\n    const color = new THREE.Color().setHSL(hue, 0.7, 0.5);\n    this.material.color = color;\n\n    // 渲染场景\n    this.renderer.render(this.scene, this.camera);\n  }\n  dispose() {\n    this.renderer.dispose();\n    this.material.dispose();\n    this.sphere.geometry.dispose();\n  }\n}\n\n// 频谱瀑布效果\n\nexport class SpectrumWaterfall {\n  constructor(canvas, options = {}) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.options = void 0;\n    this.history = [];\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.options = {\n      startColor: options.startColor || '#9c27b0',\n      endColor: options.endColor || '#3f51b5',\n      fadeSpeed: options.fadeSpeed || 0.05,\n      maxHistory: options.maxHistory || 100\n    };\n  }\n  update(frequencies) {\n    // 添加当前频谱数据到历史记录\n    this.history.unshift(new Uint8Array(frequencies));\n\n    // 限制历史记录长度\n    if (this.history.length > this.options.maxHistory) {\n      this.history.pop();\n    }\n\n    // 清除画布\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // 计算每条历史记录的高度\n    const rowHeight = this.canvas.height / this.options.maxHistory;\n\n    // 绘制历史频谱\n    this.history.forEach((freqs, index) => {\n      const y = index * rowHeight;\n\n      // 绘制频谱行\n      const barWidth = this.canvas.width / freqs.length;\n      for (let i = 0; i < freqs.length; i++) {\n        const value = freqs[i] / 255;\n        const x = i * barWidth;\n\n        // 根据值和行索引计算颜色\n        const fadeAlpha = 1 - index / this.options.maxHistory;\n        const color = getGradientColor(this.options.startColor, this.options.endColor, value);\n\n        // 设置颜色和透明度\n        this.ctx.fillStyle = color;\n        this.ctx.globalAlpha = fadeAlpha;\n\n        // 绘制矩形\n        this.ctx.fillRect(x, y, barWidth, rowHeight);\n      }\n    });\n\n    // 重置透明度\n    this.ctx.globalAlpha = 1;\n  }\n\n  // 兼容新接口的 draw 方法\n  draw(frequencies) {\n    this.update(frequencies);\n  }\n  resize(width, height) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n  }\n\n  // 释放资源\n  dispose() {\n    this.history = [];\n  }\n}\n\n// 星空效果\n\nexport class Starfield {\n  constructor(canvas, options = {}) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.stars = [];\n    this.options = void 0;\n    this.rotation = 0;\n    this.centerX = void 0;\n    this.centerY = void 0;\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.options = {\n      starCount: options.starCount || 200,\n      startColor: options.startColor || '#9c27b0',\n      endColor: options.endColor || '#3f51b5',\n      maxSpeed: options.maxSpeed || 1.5,\n      minSize: options.minSize || 1,\n      maxSize: options.maxSize || 3\n    };\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n\n    // 初始化星星\n    this.initStars();\n\n    // 监听画布大小变化\n    window.addEventListener('resize', () => this.handleResize());\n  }\n  initStars() {\n    this.stars = [];\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n    const maxRadius = Math.sqrt(Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)) / 2;\n    for (let i = 0; i < this.options.starCount; i++) {\n      // 随机角度和距离中心的半径\n      const angle = Math.random() * Math.PI * 2;\n      const radius = Math.random() * maxRadius;\n\n      // 计算坐标\n      const x = this.centerX + Math.cos(angle) * radius;\n      const y = this.centerY + Math.sin(angle) * radius;\n\n      // 创建星星\n      this.stars.push({\n        x,\n        y,\n        size: this.options.minSize + Math.random() * (this.options.maxSize - this.options.minSize),\n        color: getGradientColor(this.options.startColor, this.options.endColor, Math.random()),\n        speed: (0.1 + Math.random() * this.options.maxSpeed) * (radius / maxRadius),\n        brightness: 0.2 + Math.random() * 0.8,\n        pulseFactor: 0.5 + Math.random() * 0.5\n      });\n    }\n  }\n  update(frequencies) {\n    // 计算平均音量\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const avgVolume = sum / frequencies.length / 255;\n\n    // 清除画布\n    this.ctx.fillStyle = '#000';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // 根据音量调整旋转速度\n    this.rotation += 0.001 + avgVolume * 0.01;\n\n    // 更新和绘制星星\n    this.stars.forEach((star, index) => {\n      // 获取对应频率带的值\n      const freqIndex = Math.floor(index / this.stars.length * frequencies.length);\n      const frequency = frequencies[freqIndex] / 255;\n\n      // 计算到中心的距离\n      const dx = star.x - this.centerX;\n      const dy = star.y - this.centerY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // 旋转星星\n      const angle = Math.atan2(dy, dx) + this.rotation * star.speed;\n      const newDistance = distance + avgVolume * 20 * star.pulseFactor - 10;\n\n      // 更新位置\n      star.x = this.centerX + Math.cos(angle) * newDistance;\n      star.y = this.centerY + Math.sin(angle) * newDistance;\n\n      // 如果星星离开画布，重置它\n      if (star.x < 0 || star.x > this.canvas.width || star.y < 0 || star.y > this.canvas.height) {\n        const newAngle = Math.random() * Math.PI * 2;\n        const maxRadius = Math.sqrt(Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)) / 2;\n        const newRadius = Math.random() * maxRadius;\n        star.x = this.centerX + Math.cos(newAngle) * newRadius;\n        star.y = this.centerY + Math.sin(newAngle) * newRadius;\n      }\n\n      // 根据频率和音量调整大小和亮度\n      const brightness = star.brightness + frequency * 0.5;\n      const size = star.size * (1 + frequency * 2);\n\n      // 绘制星星\n      this.ctx.fillStyle = star.color;\n      this.ctx.globalAlpha = brightness;\n      this.ctx.beginPath();\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\n      this.ctx.fill();\n\n      // 绘制光芒\n      if (frequency > 0.6) {\n        this.ctx.globalAlpha = brightness * 0.4;\n        this.ctx.beginPath();\n        this.ctx.arc(star.x, star.y, size * 2, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    });\n\n    // 重置透明度\n    this.ctx.globalAlpha = 1;\n  }\n\n  // 兼容新接口的 draw 方法\n  draw(frequencies) {\n    this.update(frequencies);\n  }\n  handleResize() {\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n  }\n  resize(width, height) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.initStars();\n  }\n\n  // 释放资源\n  dispose() {\n    this.stars = [];\n    window.removeEventListener('resize', () => this.handleResize());\n  }\n}","map":{"version":3,"names":["THREE","getGradientColor","color1","color2","percentage","r1","parseInt","slice","g1","b1","r2","g2","b2","r","Math","round","g","b","toString","padStart","SphereVisualizer","constructor","canvas","scene","camera","renderer","sphere","geometry","options","originalPositions","rotating","material","light","rotationSpeed","Scene","PerspectiveCamera","width","height","WebGLRenderer","alpha","setSize","SphereGeometry","MeshPhongMaterial","color","shininess","specular","Mesh","add","DirectionalLight","position","set","z","draw","frequencies","sum","i","length","average","normalizedAverage","rotation","x","y","scale","hue","Date","now","Color","setHSL","render","dispose","SpectrumWaterfall","ctx","history","getContext","startColor","endColor","fadeSpeed","maxHistory","update","unshift","Uint8Array","pop","clearRect","rowHeight","forEach","freqs","index","barWidth","value","fadeAlpha","fillStyle","globalAlpha","fillRect","resize","Starfield","stars","centerX","centerY","starCount","maxSpeed","minSize","maxSize","initStars","window","addEventListener","handleResize","maxRadius","sqrt","pow","angle","random","PI","radius","cos","sin","push","size","speed","brightness","pulseFactor","avgVolume","star","freqIndex","floor","frequency","dx","dy","distance","atan2","newDistance","newAngle","newRadius","beginPath","arc","fill","removeEventListener"],"sources":["C:/Users/20213/Desktop/web/src/utils/newVisualEffects.ts"],"sourcesContent":["// 定义创意视觉效果\r\n\r\nimport * as THREE from 'three';\r\n\r\n// 计算渐变色\r\nexport const getGradientColor = (color1: string, color2: string, percentage: number): string => {\r\n  const r1 = parseInt(color1.slice(1, 3), 16);\r\n  const g1 = parseInt(color1.slice(3, 5), 16);\r\n  const b1 = parseInt(color1.slice(5, 7), 16);\r\n\r\n  const r2 = parseInt(color2.slice(1, 3), 16);\r\n  const g2 = parseInt(color2.slice(3, 5), 16);\r\n  const b2 = parseInt(color2.slice(5, 7), 16);\r\n\r\n  const r = Math.round(r1 + (r2 - r1) * percentage);\r\n  const g = Math.round(g1 + (g2 - g1) * percentage);\r\n  const b = Math.round(b1 + (b2 - b1) * percentage);\r\n\r\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// 3D球体效果\r\nexport interface SphereVisualizerOptions {\r\n  startColor?: string;\r\n  endColor?: string;\r\n  detail?: number;\r\n  distortFactor?: number;\r\n}\r\n\r\nexport class SphereVisualizer {\r\n  private scene: THREE.Scene;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private renderer: THREE.WebGLRenderer;\r\n  private sphere: THREE.Mesh;\r\n  private geometry: THREE.IcosahedronGeometry;\r\n  private options: Required<SphereVisualizerOptions>;\r\n  private originalPositions: Float32Array;\r\n  private rotating: boolean = true;\r\n  private material: THREE.MeshPhongMaterial;\r\n  private light: THREE.DirectionalLight;\r\n  private rotationSpeed: number;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.scene = new THREE.Scene();\r\n    this.camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);\r\n    this.renderer = new THREE.WebGLRenderer({ canvas, alpha: true });\r\n    this.renderer.setSize(canvas.width, canvas.height);\r\n\r\n    // 创建球体\r\n    const geometry = new THREE.SphereGeometry(2, 32, 32);\r\n    this.material = new THREE.MeshPhongMaterial({\r\n      color: 0x1db954,\r\n      shininess: 100,\r\n      specular: 0x1ed760,\r\n    });\r\n    this.sphere = new THREE.Mesh(geometry, this.material);\r\n    this.scene.add(this.sphere);\r\n\r\n    // 添加光源\r\n    this.light = new THREE.DirectionalLight(0xffffff, 1);\r\n    this.light.position.set(5, 5, 5);\r\n    this.scene.add(this.light);\r\n\r\n    // 设置相机位置\r\n    this.camera.position.z = 5;\r\n\r\n    this.rotationSpeed = 0.005;\r\n  }\r\n\r\n  draw(frequencies: Uint8Array) {\r\n    // 计算平均频率\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const average = sum / frequencies.length;\r\n    const normalizedAverage = average / 255;\r\n\r\n    // 更新球体\r\n    this.sphere.rotation.x += this.rotationSpeed;\r\n    this.sphere.rotation.y += this.rotationSpeed;\r\n\r\n    // 根据音频数据调整球体\r\n    const scale = 1 + normalizedAverage * 0.5;\r\n    this.sphere.scale.set(scale, scale, scale);\r\n\r\n    // 更新材质颜色\r\n    const hue = (Date.now() * 0.001) % 1;\r\n    const color = new THREE.Color().setHSL(hue, 0.7, 0.5);\r\n    this.material.color = color;\r\n\r\n    // 渲染场景\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  dispose() {\r\n    this.renderer.dispose();\r\n    this.material.dispose();\r\n    this.sphere.geometry.dispose();\r\n  }\r\n}\r\n\r\n// 频谱瀑布效果\r\nexport interface WaterfallOptions {\r\n  startColor?: string;\r\n  endColor?: string;\r\n  fadeSpeed?: number;\r\n  maxHistory?: number;\r\n}\r\n\r\nexport class SpectrumWaterfall {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private options: Required<WaterfallOptions>;\r\n  private history: Uint8Array[] = [];\r\n  \r\n  constructor(canvas: HTMLCanvasElement, options: WaterfallOptions = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    \r\n    this.options = {\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      fadeSpeed: options.fadeSpeed || 0.05,\r\n      maxHistory: options.maxHistory || 100\r\n    };\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    // 添加当前频谱数据到历史记录\r\n    this.history.unshift(new Uint8Array(frequencies));\r\n    \r\n    // 限制历史记录长度\r\n    if (this.history.length > this.options.maxHistory) {\r\n      this.history.pop();\r\n    }\r\n    \r\n    // 清除画布\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // 计算每条历史记录的高度\r\n    const rowHeight = this.canvas.height / this.options.maxHistory;\r\n    \r\n    // 绘制历史频谱\r\n    this.history.forEach((freqs, index) => {\r\n      const y = index * rowHeight;\r\n      \r\n      // 绘制频谱行\r\n      const barWidth = this.canvas.width / freqs.length;\r\n      \r\n      for (let i = 0; i < freqs.length; i++) {\r\n        const value = freqs[i] / 255;\r\n        const x = i * barWidth;\r\n        \r\n        // 根据值和行索引计算颜色\r\n        const fadeAlpha = 1 - (index / this.options.maxHistory);\r\n        const color = getGradientColor(\r\n          this.options.startColor, \r\n          this.options.endColor, \r\n          value\r\n        );\r\n        \r\n        // 设置颜色和透明度\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.globalAlpha = fadeAlpha;\r\n        \r\n        // 绘制矩形\r\n        this.ctx.fillRect(x, y, barWidth, rowHeight);\r\n      }\r\n    });\r\n    \r\n    // 重置透明度\r\n    this.ctx.globalAlpha = 1;\r\n  }\r\n  \r\n  // 兼容新接口的 draw 方法\r\n  draw(frequencies: Uint8Array): void {\r\n    this.update(frequencies);\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n  }\r\n  \r\n  // 释放资源\r\n  dispose(): void {\r\n    this.history = [];\r\n  }\r\n}\r\n\r\n// 星空效果\r\nexport interface Star {\r\n  x: number;\r\n  y: number;\r\n  size: number;\r\n  color: string;\r\n  speed: number;\r\n  brightness: number;\r\n  pulseFactor: number;\r\n}\r\n\r\nexport interface StarfieldOptions {\r\n  starCount?: number;\r\n  startColor?: string;\r\n  endColor?: string;\r\n  maxSpeed?: number;\r\n  minSize?: number;\r\n  maxSize?: number;\r\n}\r\n\r\nexport class Starfield {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private stars: Star[] = [];\r\n  private options: Required<StarfieldOptions>;\r\n  private rotation: number = 0;\r\n  private centerX: number;\r\n  private centerY: number;\r\n  \r\n  constructor(canvas: HTMLCanvasElement, options: StarfieldOptions = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    \r\n    this.options = {\r\n      starCount: options.starCount || 200,\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      maxSpeed: options.maxSpeed || 1.5,\r\n      minSize: options.minSize || 1,\r\n      maxSize: options.maxSize || 3\r\n    };\r\n    \r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n    \r\n    // 初始化星星\r\n    this.initStars();\r\n    \r\n    // 监听画布大小变化\r\n    window.addEventListener('resize', () => this.handleResize());\r\n  }\r\n  \r\n  private initStars(): void {\r\n    this.stars = [];\r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n    \r\n    const maxRadius = Math.sqrt(\r\n      Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)\r\n    ) / 2;\r\n    \r\n    for (let i = 0; i < this.options.starCount; i++) {\r\n      // 随机角度和距离中心的半径\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const radius = Math.random() * maxRadius;\r\n      \r\n      // 计算坐标\r\n      const x = this.centerX + Math.cos(angle) * radius;\r\n      const y = this.centerY + Math.sin(angle) * radius;\r\n      \r\n      // 创建星星\r\n      this.stars.push({\r\n        x,\r\n        y,\r\n        size: this.options.minSize + Math.random() * (this.options.maxSize - this.options.minSize),\r\n        color: getGradientColor(\r\n          this.options.startColor, \r\n          this.options.endColor, \r\n          Math.random()\r\n        ),\r\n        speed: (0.1 + Math.random() * this.options.maxSpeed) * (radius / maxRadius),\r\n        brightness: 0.2 + Math.random() * 0.8,\r\n        pulseFactor: 0.5 + Math.random() * 0.5,\r\n      });\r\n    }\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    // 计算平均音量\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const avgVolume = sum / frequencies.length / 255;\r\n    \r\n    // 清除画布\r\n    this.ctx.fillStyle = '#000';\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // 根据音量调整旋转速度\r\n    this.rotation += 0.001 + avgVolume * 0.01;\r\n    \r\n    // 更新和绘制星星\r\n    this.stars.forEach((star, index) => {\r\n      // 获取对应频率带的值\r\n      const freqIndex = Math.floor((index / this.stars.length) * frequencies.length);\r\n      const frequency = frequencies[freqIndex] / 255;\r\n      \r\n      // 计算到中心的距离\r\n      const dx = star.x - this.centerX;\r\n      const dy = star.y - this.centerY;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      // 旋转星星\r\n      const angle = Math.atan2(dy, dx) + this.rotation * star.speed;\r\n      const newDistance = distance + (avgVolume * 20 * star.pulseFactor) - 10;\r\n      \r\n      // 更新位置\r\n      star.x = this.centerX + Math.cos(angle) * newDistance;\r\n      star.y = this.centerY + Math.sin(angle) * newDistance;\r\n      \r\n      // 如果星星离开画布，重置它\r\n      if (\r\n        star.x < 0 || \r\n        star.x > this.canvas.width || \r\n        star.y < 0 || \r\n        star.y > this.canvas.height\r\n      ) {\r\n        const newAngle = Math.random() * Math.PI * 2;\r\n        const maxRadius = Math.sqrt(\r\n          Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)\r\n        ) / 2;\r\n        const newRadius = Math.random() * maxRadius;\r\n        \r\n        star.x = this.centerX + Math.cos(newAngle) * newRadius;\r\n        star.y = this.centerY + Math.sin(newAngle) * newRadius;\r\n      }\r\n      \r\n      // 根据频率和音量调整大小和亮度\r\n      const brightness = star.brightness + frequency * 0.5;\r\n      const size = star.size * (1 + frequency * 2);\r\n      \r\n      // 绘制星星\r\n      this.ctx.fillStyle = star.color;\r\n      this.ctx.globalAlpha = brightness;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n      \r\n      // 绘制光芒\r\n      if (frequency > 0.6) {\r\n        this.ctx.globalAlpha = brightness * 0.4;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(star.x, star.y, size * 2, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n      }\r\n    });\r\n    \r\n    // 重置透明度\r\n    this.ctx.globalAlpha = 1;\r\n  }\r\n  \r\n  // 兼容新接口的 draw 方法\r\n  draw(frequencies: Uint8Array): void {\r\n    this.update(frequencies);\r\n  }\r\n  \r\n  handleResize(): void {\r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.initStars();\r\n  }\r\n  \r\n  // 释放资源\r\n  dispose(): void {\r\n    this.stars = [];\r\n    window.removeEventListener('resize', () => this.handleResize());\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}