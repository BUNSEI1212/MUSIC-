{"ast":null,"code":"// 定义常用的可视化效果\n\n// 颜色工具\nexport const getGradientColor = (startColor, endColor, percent) => {\n  // 解析颜色\n  const start = {\n    r: parseInt(startColor.slice(1, 3), 16),\n    g: parseInt(startColor.slice(3, 5), 16),\n    b: parseInt(startColor.slice(5, 7), 16)\n  };\n  const end = {\n    r: parseInt(endColor.slice(1, 3), 16),\n    g: parseInt(endColor.slice(3, 5), 16),\n    b: parseInt(endColor.slice(5, 7), 16)\n  };\n\n  // 计算渐变颜色\n  const r = Math.floor(start.r + percent * (end.r - start.r));\n  const g = Math.floor(start.g + percent * (end.g - start.g));\n  const b = Math.floor(start.b + percent * (end.b - start.b));\n\n  // 转换为十六进制\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};\n\n// 频谱柱状图\nexport const drawSpectrumBars = (ctx, frequencies, width, height, options = {}) => {\n  const {\n    barWidth = 5,\n    barSpacing = 2,\n    startColor = '#9c27b0',\n    endColor = '#3f51b5',\n    minHeight = 5,\n    maxFreq = frequencies.length * 0.75 // 只显示频率范围的75%，高频部分通常人耳听不到\n  } = options;\n  ctx.clearRect(0, 0, width, height);\n  const totalBars = Math.min(Math.floor(width / (barWidth + barSpacing)), maxFreq);\n  const frequencyStep = Math.floor(frequencies.length / totalBars);\n  for (let i = 0; i < totalBars; i++) {\n    // 使用对数分布使低频更加清晰\n    const index = Math.floor(Math.pow(i / totalBars, 2) * maxFreq);\n    const value = frequencies[index] / 255; // 归一化到0-1\n\n    const barHeight = Math.max(minHeight, value * height);\n    const x = i * (barWidth + barSpacing);\n    const y = height - barHeight;\n\n    // 根据频率和音量生成颜色\n    const colorPercent = value;\n    const barColor = getGradientColor(startColor, endColor, colorPercent);\n    ctx.fillStyle = barColor;\n    ctx.fillRect(x, y, barWidth, barHeight);\n  }\n};\n\n// 波形图\nexport const drawWaveform = (ctx, waveform, width, height, options = {}) => {\n  const {\n    lineWidth = 2,\n    color = '#ba68c8',\n    filled = false,\n    mirror = false\n  } = options;\n  ctx.clearRect(0, 0, width, height);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.fillStyle = color;\n  const centerY = height / 2;\n  const step = Math.ceil(waveform.length / width);\n  ctx.beginPath();\n  if (filled) {\n    ctx.moveTo(0, centerY);\n  }\n  for (let i = 0; i < width; i++) {\n    const index = Math.floor(i * step);\n    const value = waveform[index];\n\n    // 计算y坐标，波形值范围是-1到1\n    const y = mirror ? centerY + value * centerY // 将波形映射到整个高度\n    : centerY + value * (centerY * 0.8); // 留出一些边距\n\n    if (i === 0) {\n      ctx.moveTo(i, y);\n    } else {\n      ctx.lineTo(i, y);\n    }\n  }\n  if (filled) {\n    ctx.lineTo(width, centerY);\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n};\n\n// 圆形频谱\nexport const drawCircularSpectrum = (ctx, frequencies, width, height, options = {}) => {\n  const {\n    radius = Math.min(width, height) / 3,\n    startColor = '#9c27b0',\n    endColor = '#3f51b5',\n    lineWidth = 2,\n    rotation = 0\n  } = options;\n  ctx.clearRect(0, 0, width, height);\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const maxBars = 180; // 圆周上的点数\n  const step = Math.ceil(frequencies.length / maxBars);\n  for (let i = 0; i < maxBars; i++) {\n    const index = Math.floor(i * step);\n    const value = frequencies[index] / 255; // 归一化到0-1\n\n    const barLength = radius * (0.5 + value * 0.5); // 长度在半径的50%-100%之间变化\n    const angle = i / maxBars * Math.PI * 2 + rotation;\n    const x1 = centerX + Math.cos(angle) * radius;\n    const y1 = centerY + Math.sin(angle) * radius;\n    const x2 = centerX + Math.cos(angle) * (radius + barLength);\n    const y2 = centerY + Math.sin(angle) * (radius + barLength);\n    const color = getGradientColor(startColor, endColor, value);\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n};\n\n// 粒子系统\n\nexport const createParticles = (count, width, height, options = {}) => {\n  const {\n    minSize = 2,\n    maxSize = 8,\n    startColor = '#9c27b0',\n    endColor = '#3f51b5',\n    maxSpeed = 2,\n    baseLife = 100\n  } = options;\n  const particles = [];\n  for (let i = 0; i < count; i++) {\n    const percent = Math.random();\n    const size = minSize + Math.random() * (maxSize - minSize);\n    particles.push({\n      x: Math.random() * width,\n      y: Math.random() * height,\n      size,\n      color: getGradientColor(startColor, endColor, percent),\n      speed: Math.random() * maxSpeed,\n      angle: Math.random() * Math.PI * 2,\n      life: baseLife + Math.random() * baseLife,\n      opacity: 0.7 + Math.random() * 0.3\n    });\n  }\n  return particles;\n};\nexport const updateParticles = (particles, width, height, volume) => {\n  return particles.map(particle => {\n    // 根据音量调整速度\n    const adjustedSpeed = particle.speed * (1 + volume * 3);\n\n    // 更新位置\n    const newX = particle.x + Math.cos(particle.angle) * adjustedSpeed;\n    const newY = particle.y + Math.sin(particle.angle) * adjustedSpeed;\n\n    // 如果粒子离开画布，将其重置到另一边\n    const x = newX < 0 ? width : newX > width ? 0 : newX;\n    const y = newY < 0 ? height : newY > height ? 0 : newY;\n\n    // 递减生命值\n    const life = particle.life - 1;\n\n    // 如果生命值用完，重新创建粒子\n    if (life <= 0) {\n      return {\n        x: Math.random() * width,\n        y: Math.random() * height,\n        size: particle.size,\n        color: particle.color,\n        speed: particle.speed,\n        angle: Math.random() * Math.PI * 2,\n        life: 100 + Math.random() * 100,\n        opacity: 0.7 + Math.random() * 0.3\n      };\n    }\n    return {\n      ...particle,\n      x,\n      y,\n      life\n    };\n  });\n};\nexport const drawParticles = (ctx, particles, volume) => {\n  particles.forEach(particle => {\n    // 根据音量和生命值调整大小和不透明度\n    const sizeMultiplier = 1 + volume * 2;\n    const size = particle.size * sizeMultiplier;\n    const opacity = particle.opacity * particle.life / 200;\n    ctx.globalAlpha = opacity;\n    ctx.fillStyle = particle.color;\n    ctx.beginPath();\n    ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n    ctx.fill();\n  });\n  ctx.globalAlpha = 1;\n};","map":{"version":3,"names":["getGradientColor","startColor","endColor","percent","start","r","parseInt","slice","g","b","end","Math","floor","toString","padStart","drawSpectrumBars","ctx","frequencies","width","height","options","barWidth","barSpacing","minHeight","maxFreq","length","clearRect","totalBars","min","frequencyStep","i","index","pow","value","barHeight","max","x","y","colorPercent","barColor","fillStyle","fillRect","drawWaveform","waveform","lineWidth","color","filled","mirror","strokeStyle","centerY","step","ceil","beginPath","moveTo","lineTo","fill","stroke","drawCircularSpectrum","radius","rotation","centerX","maxBars","barLength","angle","PI","x1","cos","y1","sin","x2","y2","createParticles","count","minSize","maxSize","maxSpeed","baseLife","particles","random","size","push","speed","life","opacity","updateParticles","volume","map","particle","adjustedSpeed","newX","newY","drawParticles","forEach","sizeMultiplier","globalAlpha","arc"],"sources":["C:/Users/20213/Desktop/web/src/utils/visualEffects.ts"],"sourcesContent":["// 定义常用的可视化效果\r\n\r\n// 颜色工具\r\nexport const getGradientColor = (\r\n  startColor: string,\r\n  endColor: string, \r\n  percent: number\r\n): string => {\r\n  // 解析颜色\r\n  const start = {\r\n    r: parseInt(startColor.slice(1, 3), 16),\r\n    g: parseInt(startColor.slice(3, 5), 16),\r\n    b: parseInt(startColor.slice(5, 7), 16)\r\n  };\r\n  \r\n  const end = {\r\n    r: parseInt(endColor.slice(1, 3), 16),\r\n    g: parseInt(endColor.slice(3, 5), 16),\r\n    b: parseInt(endColor.slice(5, 7), 16)\r\n  };\r\n  \r\n  // 计算渐变颜色\r\n  const r = Math.floor(start.r + percent * (end.r - start.r));\r\n  const g = Math.floor(start.g + percent * (end.g - start.g));\r\n  const b = Math.floor(start.b + percent * (end.b - start.b));\r\n  \r\n  // 转换为十六进制\r\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// 频谱柱状图\r\nexport const drawSpectrumBars = (\r\n  ctx: CanvasRenderingContext2D,\r\n  frequencies: Uint8Array,\r\n  width: number,\r\n  height: number,\r\n  options: {\r\n    barWidth?: number;\r\n    barSpacing?: number;\r\n    startColor?: string;\r\n    endColor?: string;\r\n    minHeight?: number;\r\n    maxFreq?: number;\r\n  } = {}\r\n) => {\r\n  const {\r\n    barWidth = 5,\r\n    barSpacing = 2,\r\n    startColor = '#9c27b0',\r\n    endColor = '#3f51b5',\r\n    minHeight = 5,\r\n    maxFreq = frequencies.length * 0.75 // 只显示频率范围的75%，高频部分通常人耳听不到\r\n  } = options;\r\n  \r\n  ctx.clearRect(0, 0, width, height);\r\n  \r\n  const totalBars = Math.min(Math.floor(width / (barWidth + barSpacing)), maxFreq);\r\n  const frequencyStep = Math.floor(frequencies.length / totalBars);\r\n  \r\n  for (let i = 0; i < totalBars; i++) {\r\n    // 使用对数分布使低频更加清晰\r\n    const index = Math.floor(Math.pow(i / totalBars, 2) * maxFreq);\r\n    const value = frequencies[index] / 255; // 归一化到0-1\r\n    \r\n    const barHeight = Math.max(minHeight, value * height);\r\n    const x = i * (barWidth + barSpacing);\r\n    const y = height - barHeight;\r\n    \r\n    // 根据频率和音量生成颜色\r\n    const colorPercent = value;\r\n    const barColor = getGradientColor(startColor, endColor, colorPercent);\r\n    \r\n    ctx.fillStyle = barColor;\r\n    ctx.fillRect(x, y, barWidth, barHeight);\r\n  }\r\n};\r\n\r\n// 波形图\r\nexport const drawWaveform = (\r\n  ctx: CanvasRenderingContext2D,\r\n  waveform: Float32Array,\r\n  width: number,\r\n  height: number,\r\n  options: {\r\n    lineWidth?: number;\r\n    color?: string;\r\n    filled?: boolean;\r\n    mirror?: boolean;\r\n  } = {}\r\n) => {\r\n  const {\r\n    lineWidth = 2,\r\n    color = '#ba68c8',\r\n    filled = false,\r\n    mirror = false\r\n  } = options;\r\n  \r\n  ctx.clearRect(0, 0, width, height);\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.strokeStyle = color;\r\n  ctx.fillStyle = color;\r\n  \r\n  const centerY = height / 2;\r\n  const step = Math.ceil(waveform.length / width);\r\n  \r\n  ctx.beginPath();\r\n  \r\n  if (filled) {\r\n    ctx.moveTo(0, centerY);\r\n  }\r\n  \r\n  for (let i = 0; i < width; i++) {\r\n    const index = Math.floor(i * step);\r\n    const value = waveform[index];\r\n    \r\n    // 计算y坐标，波形值范围是-1到1\r\n    const y = mirror\r\n      ? centerY + value * centerY // 将波形映射到整个高度\r\n      : centerY + value * (centerY * 0.8); // 留出一些边距\r\n      \r\n    if (i === 0) {\r\n      ctx.moveTo(i, y);\r\n    } else {\r\n      ctx.lineTo(i, y);\r\n    }\r\n  }\r\n  \r\n  if (filled) {\r\n    ctx.lineTo(width, centerY);\r\n    ctx.fill();\r\n  } else {\r\n    ctx.stroke();\r\n  }\r\n};\r\n\r\n// 圆形频谱\r\nexport const drawCircularSpectrum = (\r\n  ctx: CanvasRenderingContext2D,\r\n  frequencies: Uint8Array,\r\n  width: number,\r\n  height: number,\r\n  options: {\r\n    radius?: number;\r\n    startColor?: string;\r\n    endColor?: string;\r\n    lineWidth?: number;\r\n    rotation?: number;\r\n  } = {}\r\n) => {\r\n  const {\r\n    radius = Math.min(width, height) / 3,\r\n    startColor = '#9c27b0',\r\n    endColor = '#3f51b5',\r\n    lineWidth = 2,\r\n    rotation = 0\r\n  } = options;\r\n  \r\n  ctx.clearRect(0, 0, width, height);\r\n  \r\n  const centerX = width / 2;\r\n  const centerY = height / 2;\r\n  const maxBars = 180; // 圆周上的点数\r\n  const step = Math.ceil(frequencies.length / maxBars);\r\n  \r\n  for (let i = 0; i < maxBars; i++) {\r\n    const index = Math.floor(i * step);\r\n    const value = frequencies[index] / 255; // 归一化到0-1\r\n    \r\n    const barLength = radius * (0.5 + value * 0.5); // 长度在半径的50%-100%之间变化\r\n    const angle = (i / maxBars) * Math.PI * 2 + rotation;\r\n    \r\n    const x1 = centerX + Math.cos(angle) * radius;\r\n    const y1 = centerY + Math.sin(angle) * radius;\r\n    \r\n    const x2 = centerX + Math.cos(angle) * (radius + barLength);\r\n    const y2 = centerY + Math.sin(angle) * (radius + barLength);\r\n    \r\n    const color = getGradientColor(startColor, endColor, value);\r\n    \r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeStyle = color;\r\n    \r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n};\r\n\r\n// 粒子系统\r\nexport interface Particle {\r\n  x: number;\r\n  y: number;\r\n  size: number;\r\n  color: string;\r\n  speed: number;\r\n  angle: number;\r\n  life: number;\r\n  opacity: number;\r\n}\r\n\r\nexport const createParticles = (\r\n  count: number,\r\n  width: number,\r\n  height: number,\r\n  options: {\r\n    minSize?: number;\r\n    maxSize?: number;\r\n    startColor?: string;\r\n    endColor?: string;\r\n    maxSpeed?: number;\r\n    baseLife?: number;\r\n  } = {}\r\n): Particle[] => {\r\n  const {\r\n    minSize = 2,\r\n    maxSize = 8,\r\n    startColor = '#9c27b0',\r\n    endColor = '#3f51b5',\r\n    maxSpeed = 2,\r\n    baseLife = 100\r\n  } = options;\r\n  \r\n  const particles: Particle[] = [];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const percent = Math.random();\r\n    const size = minSize + Math.random() * (maxSize - minSize);\r\n    \r\n    particles.push({\r\n      x: Math.random() * width,\r\n      y: Math.random() * height,\r\n      size,\r\n      color: getGradientColor(startColor, endColor, percent),\r\n      speed: Math.random() * maxSpeed,\r\n      angle: Math.random() * Math.PI * 2,\r\n      life: baseLife + Math.random() * baseLife,\r\n      opacity: 0.7 + Math.random() * 0.3\r\n    });\r\n  }\r\n  \r\n  return particles;\r\n};\r\n\r\nexport const updateParticles = (\r\n  particles: Particle[],\r\n  width: number,\r\n  height: number,\r\n  volume: number\r\n): Particle[] => {\r\n  return particles.map(particle => {\r\n    // 根据音量调整速度\r\n    const adjustedSpeed = particle.speed * (1 + volume * 3);\r\n    \r\n    // 更新位置\r\n    const newX = particle.x + Math.cos(particle.angle) * adjustedSpeed;\r\n    const newY = particle.y + Math.sin(particle.angle) * adjustedSpeed;\r\n    \r\n    // 如果粒子离开画布，将其重置到另一边\r\n    const x = newX < 0 ? width : newX > width ? 0 : newX;\r\n    const y = newY < 0 ? height : newY > height ? 0 : newY;\r\n    \r\n    // 递减生命值\r\n    const life = particle.life - 1;\r\n    \r\n    // 如果生命值用完，重新创建粒子\r\n    if (life <= 0) {\r\n      return {\r\n        x: Math.random() * width,\r\n        y: Math.random() * height,\r\n        size: particle.size,\r\n        color: particle.color,\r\n        speed: particle.speed,\r\n        angle: Math.random() * Math.PI * 2,\r\n        life: 100 + Math.random() * 100,\r\n        opacity: 0.7 + Math.random() * 0.3\r\n      };\r\n    }\r\n    \r\n    return {\r\n      ...particle,\r\n      x,\r\n      y,\r\n      life\r\n    };\r\n  });\r\n};\r\n\r\nexport const drawParticles = (\r\n  ctx: CanvasRenderingContext2D,\r\n  particles: Particle[],\r\n  volume: number\r\n) => {\r\n  particles.forEach(particle => {\r\n    // 根据音量和生命值调整大小和不透明度\r\n    const sizeMultiplier = 1 + volume * 2;\r\n    const size = particle.size * sizeMultiplier;\r\n    const opacity = (particle.opacity * particle.life) / 200;\r\n    \r\n    ctx.globalAlpha = opacity;\r\n    ctx.fillStyle = particle.color;\r\n    \r\n    ctx.beginPath();\r\n    ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  });\r\n  \r\n  ctx.globalAlpha = 1;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}