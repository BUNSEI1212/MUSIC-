{"ast":null,"code":"// 定义创意视觉效果\nimport*as THREE from'three';// 计算渐变色\nexport const getGradientColor=(color1,color2,percentage)=>{const r1=parseInt(color1.slice(1,3),16);const g1=parseInt(color1.slice(3,5),16);const b1=parseInt(color1.slice(5,7),16);const r2=parseInt(color2.slice(1,3),16);const g2=parseInt(color2.slice(3,5),16);const b2=parseInt(color2.slice(5,7),16);const r=Math.round(r1+(r2-r1)*percentage);const g=Math.round(g1+(g2-g1)*percentage);const b=Math.round(b1+(b2-b1)*percentage);return`#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`;};// 3D球体效果\nexport class SphereVisualizer{constructor(canvas){this.scene=void 0;this.camera=void 0;this.renderer=void 0;this.sphere=void 0;this.geometry=void 0;this.options=void 0;this.originalPositions=void 0;this.rotating=true;this.material=void 0;this.light=void 0;this.rotationSpeed=void 0;this.scene=new THREE.Scene();this.camera=new THREE.PerspectiveCamera(75,canvas.width/canvas.height,0.1,1000);this.renderer=new THREE.WebGLRenderer({canvas,alpha:true});this.renderer.setSize(canvas.width,canvas.height);// 创建球体\nconst geometry=new THREE.SphereGeometry(2,32,32);this.material=new THREE.MeshPhongMaterial({color:0x1db954,shininess:100,specular:0x1ed760});this.sphere=new THREE.Mesh(geometry,this.material);this.scene.add(this.sphere);// 添加光源\nthis.light=new THREE.DirectionalLight(0xffffff,1);this.light.position.set(5,5,5);this.scene.add(this.light);// 设置相机位置\nthis.camera.position.z=5;this.rotationSpeed=0.005;}draw(frequencies){// 计算平均频率\nlet sum=0;for(let i=0;i<frequencies.length;i++){sum+=frequencies[i];}const average=sum/frequencies.length;const normalizedAverage=average/255;// 更新球体\nthis.sphere.rotation.x+=this.rotationSpeed;this.sphere.rotation.y+=this.rotationSpeed;// 根据音频数据调整球体\nconst scale=1+normalizedAverage*0.5;this.sphere.scale.set(scale,scale,scale);// 更新材质颜色\nconst hue=Date.now()*0.001%1;const color=new THREE.Color().setHSL(hue,0.7,0.5);this.material.color=color;// 渲染场景\nthis.renderer.render(this.scene,this.camera);}dispose(){this.renderer.dispose();this.material.dispose();this.sphere.geometry.dispose();}}// 频谱瀑布效果\nexport class SpectrumWaterfall{constructor(canvas){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.canvas=void 0;this.ctx=void 0;this.options=void 0;this.history=[];this.canvas=canvas;this.ctx=canvas.getContext('2d');this.options={startColor:options.startColor||'#9c27b0',endColor:options.endColor||'#3f51b5',fadeSpeed:options.fadeSpeed||0.05,maxHistory:options.maxHistory||100};}update(frequencies){// 添加当前频谱数据到历史记录\nthis.history.unshift(new Uint8Array(frequencies));// 限制历史记录长度\nif(this.history.length>this.options.maxHistory){this.history.pop();}// 清除画布\nthis.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);// 计算每条历史记录的高度\nconst rowHeight=this.canvas.height/this.options.maxHistory;// 绘制历史频谱\nthis.history.forEach((freqs,index)=>{const y=index*rowHeight;// 绘制频谱行\nconst barWidth=this.canvas.width/freqs.length;for(let i=0;i<freqs.length;i++){const value=freqs[i]/255;const x=i*barWidth;// 根据值和行索引计算颜色\nconst fadeAlpha=1-index/this.options.maxHistory;const color=getGradientColor(this.options.startColor,this.options.endColor,value);// 设置颜色和透明度\nthis.ctx.fillStyle=color;this.ctx.globalAlpha=fadeAlpha;// 绘制矩形\nthis.ctx.fillRect(x,y,barWidth,rowHeight);}});// 重置透明度\nthis.ctx.globalAlpha=1;}// 兼容新接口的 draw 方法\ndraw(frequencies){this.update(frequencies);}resize(width,height){this.canvas.width=width;this.canvas.height=height;}// 释放资源\ndispose(){this.history=[];}}// 星空效果\nexport class Starfield{constructor(canvas){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.canvas=void 0;this.ctx=void 0;this.stars=[];this.options=void 0;this.rotation=0;this.centerX=void 0;this.centerY=void 0;this.canvas=canvas;this.ctx=canvas.getContext('2d');this.options={starCount:options.starCount||200,startColor:options.startColor||'#9c27b0',endColor:options.endColor||'#3f51b5',maxSpeed:options.maxSpeed||1.5,minSize:options.minSize||1,maxSize:options.maxSize||3};this.centerX=this.canvas.width/2;this.centerY=this.canvas.height/2;// 初始化星星\nthis.initStars();// 监听画布大小变化\nwindow.addEventListener('resize',()=>this.handleResize());}initStars(){this.stars=[];this.centerX=this.canvas.width/2;this.centerY=this.canvas.height/2;const maxRadius=Math.sqrt(Math.pow(this.canvas.width,2)+Math.pow(this.canvas.height,2))/2;for(let i=0;i<this.options.starCount;i++){// 随机角度和距离中心的半径\nconst angle=Math.random()*Math.PI*2;const radius=Math.random()*maxRadius;// 计算坐标\nconst x=this.centerX+Math.cos(angle)*radius;const y=this.centerY+Math.sin(angle)*radius;// 创建星星\nthis.stars.push({x,y,size:this.options.minSize+Math.random()*(this.options.maxSize-this.options.minSize),color:getGradientColor(this.options.startColor,this.options.endColor,Math.random()),speed:(0.1+Math.random()*this.options.maxSpeed)*(radius/maxRadius),brightness:0.2+Math.random()*0.8,pulseFactor:0.5+Math.random()*0.5});}}update(frequencies){// 计算平均音量\nlet sum=0;for(let i=0;i<frequencies.length;i++){sum+=frequencies[i];}const avgVolume=sum/frequencies.length/255;// 清除画布\nthis.ctx.fillStyle='#000';this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);// 根据音量调整旋转速度\nthis.rotation+=0.001+avgVolume*0.01;// 更新和绘制星星\nthis.stars.forEach((star,index)=>{// 获取对应频率带的值\nconst freqIndex=Math.floor(index/this.stars.length*frequencies.length);const frequency=frequencies[freqIndex]/255;// 计算到中心的距离\nconst dx=star.x-this.centerX;const dy=star.y-this.centerY;const distance=Math.sqrt(dx*dx+dy*dy);// 旋转星星\nconst angle=Math.atan2(dy,dx)+this.rotation*star.speed;const newDistance=distance+avgVolume*20*star.pulseFactor-10;// 更新位置\nstar.x=this.centerX+Math.cos(angle)*newDistance;star.y=this.centerY+Math.sin(angle)*newDistance;// 如果星星离开画布，重置它\nif(star.x<0||star.x>this.canvas.width||star.y<0||star.y>this.canvas.height){const newAngle=Math.random()*Math.PI*2;const maxRadius=Math.sqrt(Math.pow(this.canvas.width,2)+Math.pow(this.canvas.height,2))/2;const newRadius=Math.random()*maxRadius;star.x=this.centerX+Math.cos(newAngle)*newRadius;star.y=this.centerY+Math.sin(newAngle)*newRadius;}// 根据频率和音量调整大小和亮度\nconst brightness=star.brightness+frequency*0.5;const size=star.size*(1+frequency*2);// 绘制星星\nthis.ctx.fillStyle=star.color;this.ctx.globalAlpha=brightness;this.ctx.beginPath();this.ctx.arc(star.x,star.y,size,0,Math.PI*2);this.ctx.fill();// 绘制光芒\nif(frequency>0.6){this.ctx.globalAlpha=brightness*0.4;this.ctx.beginPath();this.ctx.arc(star.x,star.y,size*2,0,Math.PI*2);this.ctx.fill();}});// 重置透明度\nthis.ctx.globalAlpha=1;}// 兼容新接口的 draw 方法\ndraw(frequencies){this.update(frequencies);}handleResize(){this.centerX=this.canvas.width/2;this.centerY=this.canvas.height/2;}resize(width,height){this.canvas.width=width;this.canvas.height=height;this.initStars();}// 释放资源\ndispose(){this.stars=[];window.removeEventListener('resize',()=>this.handleResize());}}","map":{"version":3,"names":["THREE","getGradientColor","color1","color2","percentage","r1","parseInt","slice","g1","b1","r2","g2","b2","r","Math","round","g","b","toString","padStart","SphereVisualizer","constructor","canvas","scene","camera","renderer","sphere","geometry","options","originalPositions","rotating","material","light","rotationSpeed","Scene","PerspectiveCamera","width","height","WebGLRenderer","alpha","setSize","SphereGeometry","MeshPhongMaterial","color","shininess","specular","Mesh","add","DirectionalLight","position","set","z","draw","frequencies","sum","i","length","average","normalizedAverage","rotation","x","y","scale","hue","Date","now","Color","setHSL","render","dispose","SpectrumWaterfall","arguments","undefined","ctx","history","getContext","startColor","endColor","fadeSpeed","maxHistory","update","unshift","Uint8Array","pop","clearRect","rowHeight","forEach","freqs","index","barWidth","value","fadeAlpha","fillStyle","globalAlpha","fillRect","resize","Starfield","stars","centerX","centerY","starCount","maxSpeed","minSize","maxSize","initStars","window","addEventListener","handleResize","maxRadius","sqrt","pow","angle","random","PI","radius","cos","sin","push","size","speed","brightness","pulseFactor","avgVolume","star","freqIndex","floor","frequency","dx","dy","distance","atan2","newDistance","newAngle","newRadius","beginPath","arc","fill","removeEventListener"],"sources":["C:/Users/20213/Desktop/web/src/utils/newVisualEffects.ts"],"sourcesContent":["// 定义创意视觉效果\r\n\r\nimport * as THREE from 'three';\r\n\r\n// 计算渐变色\r\nexport const getGradientColor = (color1: string, color2: string, percentage: number): string => {\r\n  const r1 = parseInt(color1.slice(1, 3), 16);\r\n  const g1 = parseInt(color1.slice(3, 5), 16);\r\n  const b1 = parseInt(color1.slice(5, 7), 16);\r\n\r\n  const r2 = parseInt(color2.slice(1, 3), 16);\r\n  const g2 = parseInt(color2.slice(3, 5), 16);\r\n  const b2 = parseInt(color2.slice(5, 7), 16);\r\n\r\n  const r = Math.round(r1 + (r2 - r1) * percentage);\r\n  const g = Math.round(g1 + (g2 - g1) * percentage);\r\n  const b = Math.round(b1 + (b2 - b1) * percentage);\r\n\r\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// 3D球体效果\r\nexport interface SphereVisualizerOptions {\r\n  startColor?: string;\r\n  endColor?: string;\r\n  detail?: number;\r\n  distortFactor?: number;\r\n}\r\n\r\nexport class SphereVisualizer {\r\n  private scene: THREE.Scene;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private renderer: THREE.WebGLRenderer;\r\n  private sphere: THREE.Mesh;\r\n  private geometry: THREE.IcosahedronGeometry;\r\n  private options: Required<SphereVisualizerOptions>;\r\n  private originalPositions: Float32Array;\r\n  private rotating: boolean = true;\r\n  private material: THREE.MeshPhongMaterial;\r\n  private light: THREE.DirectionalLight;\r\n  private rotationSpeed: number;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.scene = new THREE.Scene();\r\n    this.camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);\r\n    this.renderer = new THREE.WebGLRenderer({ canvas, alpha: true });\r\n    this.renderer.setSize(canvas.width, canvas.height);\r\n\r\n    // 创建球体\r\n    const geometry = new THREE.SphereGeometry(2, 32, 32);\r\n    this.material = new THREE.MeshPhongMaterial({\r\n      color: 0x1db954,\r\n      shininess: 100,\r\n      specular: 0x1ed760,\r\n    });\r\n    this.sphere = new THREE.Mesh(geometry, this.material);\r\n    this.scene.add(this.sphere);\r\n\r\n    // 添加光源\r\n    this.light = new THREE.DirectionalLight(0xffffff, 1);\r\n    this.light.position.set(5, 5, 5);\r\n    this.scene.add(this.light);\r\n\r\n    // 设置相机位置\r\n    this.camera.position.z = 5;\r\n\r\n    this.rotationSpeed = 0.005;\r\n  }\r\n\r\n  draw(frequencies: Uint8Array) {\r\n    // 计算平均频率\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const average = sum / frequencies.length;\r\n    const normalizedAverage = average / 255;\r\n\r\n    // 更新球体\r\n    this.sphere.rotation.x += this.rotationSpeed;\r\n    this.sphere.rotation.y += this.rotationSpeed;\r\n\r\n    // 根据音频数据调整球体\r\n    const scale = 1 + normalizedAverage * 0.5;\r\n    this.sphere.scale.set(scale, scale, scale);\r\n\r\n    // 更新材质颜色\r\n    const hue = (Date.now() * 0.001) % 1;\r\n    const color = new THREE.Color().setHSL(hue, 0.7, 0.5);\r\n    this.material.color = color;\r\n\r\n    // 渲染场景\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  dispose() {\r\n    this.renderer.dispose();\r\n    this.material.dispose();\r\n    this.sphere.geometry.dispose();\r\n  }\r\n}\r\n\r\n// 频谱瀑布效果\r\nexport interface WaterfallOptions {\r\n  startColor?: string;\r\n  endColor?: string;\r\n  fadeSpeed?: number;\r\n  maxHistory?: number;\r\n}\r\n\r\nexport class SpectrumWaterfall {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private options: Required<WaterfallOptions>;\r\n  private history: Uint8Array[] = [];\r\n  \r\n  constructor(canvas: HTMLCanvasElement, options: WaterfallOptions = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    \r\n    this.options = {\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      fadeSpeed: options.fadeSpeed || 0.05,\r\n      maxHistory: options.maxHistory || 100\r\n    };\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    // 添加当前频谱数据到历史记录\r\n    this.history.unshift(new Uint8Array(frequencies));\r\n    \r\n    // 限制历史记录长度\r\n    if (this.history.length > this.options.maxHistory) {\r\n      this.history.pop();\r\n    }\r\n    \r\n    // 清除画布\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // 计算每条历史记录的高度\r\n    const rowHeight = this.canvas.height / this.options.maxHistory;\r\n    \r\n    // 绘制历史频谱\r\n    this.history.forEach((freqs, index) => {\r\n      const y = index * rowHeight;\r\n      \r\n      // 绘制频谱行\r\n      const barWidth = this.canvas.width / freqs.length;\r\n      \r\n      for (let i = 0; i < freqs.length; i++) {\r\n        const value = freqs[i] / 255;\r\n        const x = i * barWidth;\r\n        \r\n        // 根据值和行索引计算颜色\r\n        const fadeAlpha = 1 - (index / this.options.maxHistory);\r\n        const color = getGradientColor(\r\n          this.options.startColor, \r\n          this.options.endColor, \r\n          value\r\n        );\r\n        \r\n        // 设置颜色和透明度\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.globalAlpha = fadeAlpha;\r\n        \r\n        // 绘制矩形\r\n        this.ctx.fillRect(x, y, barWidth, rowHeight);\r\n      }\r\n    });\r\n    \r\n    // 重置透明度\r\n    this.ctx.globalAlpha = 1;\r\n  }\r\n  \r\n  // 兼容新接口的 draw 方法\r\n  draw(frequencies: Uint8Array): void {\r\n    this.update(frequencies);\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n  }\r\n  \r\n  // 释放资源\r\n  dispose(): void {\r\n    this.history = [];\r\n  }\r\n}\r\n\r\n// 星空效果\r\nexport interface Star {\r\n  x: number;\r\n  y: number;\r\n  size: number;\r\n  color: string;\r\n  speed: number;\r\n  brightness: number;\r\n  pulseFactor: number;\r\n}\r\n\r\nexport interface StarfieldOptions {\r\n  starCount?: number;\r\n  startColor?: string;\r\n  endColor?: string;\r\n  maxSpeed?: number;\r\n  minSize?: number;\r\n  maxSize?: number;\r\n}\r\n\r\nexport class Starfield {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private stars: Star[] = [];\r\n  private options: Required<StarfieldOptions>;\r\n  private rotation: number = 0;\r\n  private centerX: number;\r\n  private centerY: number;\r\n  \r\n  constructor(canvas: HTMLCanvasElement, options: StarfieldOptions = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d')!;\r\n    \r\n    this.options = {\r\n      starCount: options.starCount || 200,\r\n      startColor: options.startColor || '#9c27b0',\r\n      endColor: options.endColor || '#3f51b5',\r\n      maxSpeed: options.maxSpeed || 1.5,\r\n      minSize: options.minSize || 1,\r\n      maxSize: options.maxSize || 3\r\n    };\r\n    \r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n    \r\n    // 初始化星星\r\n    this.initStars();\r\n    \r\n    // 监听画布大小变化\r\n    window.addEventListener('resize', () => this.handleResize());\r\n  }\r\n  \r\n  private initStars(): void {\r\n    this.stars = [];\r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n    \r\n    const maxRadius = Math.sqrt(\r\n      Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)\r\n    ) / 2;\r\n    \r\n    for (let i = 0; i < this.options.starCount; i++) {\r\n      // 随机角度和距离中心的半径\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const radius = Math.random() * maxRadius;\r\n      \r\n      // 计算坐标\r\n      const x = this.centerX + Math.cos(angle) * radius;\r\n      const y = this.centerY + Math.sin(angle) * radius;\r\n      \r\n      // 创建星星\r\n      this.stars.push({\r\n        x,\r\n        y,\r\n        size: this.options.minSize + Math.random() * (this.options.maxSize - this.options.minSize),\r\n        color: getGradientColor(\r\n          this.options.startColor, \r\n          this.options.endColor, \r\n          Math.random()\r\n        ),\r\n        speed: (0.1 + Math.random() * this.options.maxSpeed) * (radius / maxRadius),\r\n        brightness: 0.2 + Math.random() * 0.8,\r\n        pulseFactor: 0.5 + Math.random() * 0.5,\r\n      });\r\n    }\r\n  }\r\n  \r\n  update(frequencies: Uint8Array): void {\r\n    // 计算平均音量\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const avgVolume = sum / frequencies.length / 255;\r\n    \r\n    // 清除画布\r\n    this.ctx.fillStyle = '#000';\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // 根据音量调整旋转速度\r\n    this.rotation += 0.001 + avgVolume * 0.01;\r\n    \r\n    // 更新和绘制星星\r\n    this.stars.forEach((star, index) => {\r\n      // 获取对应频率带的值\r\n      const freqIndex = Math.floor((index / this.stars.length) * frequencies.length);\r\n      const frequency = frequencies[freqIndex] / 255;\r\n      \r\n      // 计算到中心的距离\r\n      const dx = star.x - this.centerX;\r\n      const dy = star.y - this.centerY;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      // 旋转星星\r\n      const angle = Math.atan2(dy, dx) + this.rotation * star.speed;\r\n      const newDistance = distance + (avgVolume * 20 * star.pulseFactor) - 10;\r\n      \r\n      // 更新位置\r\n      star.x = this.centerX + Math.cos(angle) * newDistance;\r\n      star.y = this.centerY + Math.sin(angle) * newDistance;\r\n      \r\n      // 如果星星离开画布，重置它\r\n      if (\r\n        star.x < 0 || \r\n        star.x > this.canvas.width || \r\n        star.y < 0 || \r\n        star.y > this.canvas.height\r\n      ) {\r\n        const newAngle = Math.random() * Math.PI * 2;\r\n        const maxRadius = Math.sqrt(\r\n          Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)\r\n        ) / 2;\r\n        const newRadius = Math.random() * maxRadius;\r\n        \r\n        star.x = this.centerX + Math.cos(newAngle) * newRadius;\r\n        star.y = this.centerY + Math.sin(newAngle) * newRadius;\r\n      }\r\n      \r\n      // 根据频率和音量调整大小和亮度\r\n      const brightness = star.brightness + frequency * 0.5;\r\n      const size = star.size * (1 + frequency * 2);\r\n      \r\n      // 绘制星星\r\n      this.ctx.fillStyle = star.color;\r\n      this.ctx.globalAlpha = brightness;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(star.x, star.y, size, 0, Math.PI * 2);\r\n      this.ctx.fill();\r\n      \r\n      // 绘制光芒\r\n      if (frequency > 0.6) {\r\n        this.ctx.globalAlpha = brightness * 0.4;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(star.x, star.y, size * 2, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n      }\r\n    });\r\n    \r\n    // 重置透明度\r\n    this.ctx.globalAlpha = 1;\r\n  }\r\n  \r\n  // 兼容新接口的 draw 方法\r\n  draw(frequencies: Uint8Array): void {\r\n    this.update(frequencies);\r\n  }\r\n  \r\n  handleResize(): void {\r\n    this.centerX = this.canvas.width / 2;\r\n    this.centerY = this.canvas.height / 2;\r\n  }\r\n  \r\n  resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.initStars();\r\n  }\r\n  \r\n  // 释放资源\r\n  dispose(): void {\r\n    this.stars = [];\r\n    window.removeEventListener('resize', () => this.handleResize());\r\n  }\r\n}\r\n"],"mappings":"AAAA;AAEA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAACC,MAAc,CAAEC,MAAc,CAAEC,UAAkB,GAAa,CAC9F,KAAM,CAAAC,EAAE,CAAGC,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC3C,KAAM,CAAAC,EAAE,CAAGF,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC3C,KAAM,CAAAE,EAAE,CAAGH,QAAQ,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAE3C,KAAM,CAAAG,EAAE,CAAGJ,QAAQ,CAACH,MAAM,CAACI,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC3C,KAAM,CAAAI,EAAE,CAAGL,QAAQ,CAACH,MAAM,CAACI,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC3C,KAAM,CAAAK,EAAE,CAAGN,QAAQ,CAACH,MAAM,CAACI,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAE3C,KAAM,CAAAM,CAAC,CAAGC,IAAI,CAACC,KAAK,CAACV,EAAE,CAAG,CAACK,EAAE,CAAGL,EAAE,EAAID,UAAU,CAAC,CACjD,KAAM,CAAAY,CAAC,CAAGF,IAAI,CAACC,KAAK,CAACP,EAAE,CAAG,CAACG,EAAE,CAAGH,EAAE,EAAIJ,UAAU,CAAC,CACjD,KAAM,CAAAa,CAAC,CAAGH,IAAI,CAACC,KAAK,CAACN,EAAE,CAAG,CAACG,EAAE,CAAGH,EAAE,EAAIL,UAAU,CAAC,CAEjD,MAAO,IAAIS,CAAC,CAACK,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,GAAGH,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,GAAGF,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAClH,CAAC,CAED;AAQA,MAAO,MAAM,CAAAC,gBAAiB,CAa5BC,WAAWA,CAACC,MAAyB,CAAE,MAZ/BC,KAAK,aACLC,MAAM,aACNC,QAAQ,aACRC,MAAM,aACNC,QAAQ,aACRC,OAAO,aACPC,iBAAiB,aACjBC,QAAQ,CAAY,IAAI,MACxBC,QAAQ,aACRC,KAAK,aACLC,aAAa,QAGnB,IAAI,CAACV,KAAK,CAAG,GAAI,CAAAvB,KAAK,CAACkC,KAAK,CAAC,CAAC,CAC9B,IAAI,CAACV,MAAM,CAAG,GAAI,CAAAxB,KAAK,CAACmC,iBAAiB,CAAC,EAAE,CAAEb,MAAM,CAACc,KAAK,CAAGd,MAAM,CAACe,MAAM,CAAE,GAAG,CAAE,IAAI,CAAC,CACtF,IAAI,CAACZ,QAAQ,CAAG,GAAI,CAAAzB,KAAK,CAACsC,aAAa,CAAC,CAAEhB,MAAM,CAAEiB,KAAK,CAAE,IAAK,CAAC,CAAC,CAChE,IAAI,CAACd,QAAQ,CAACe,OAAO,CAAClB,MAAM,CAACc,KAAK,CAAEd,MAAM,CAACe,MAAM,CAAC,CAElD;AACA,KAAM,CAAAV,QAAQ,CAAG,GAAI,CAAA3B,KAAK,CAACyC,cAAc,CAAC,CAAC,CAAE,EAAE,CAAE,EAAE,CAAC,CACpD,IAAI,CAACV,QAAQ,CAAG,GAAI,CAAA/B,KAAK,CAAC0C,iBAAiB,CAAC,CAC1CC,KAAK,CAAE,QAAQ,CACfC,SAAS,CAAE,GAAG,CACdC,QAAQ,CAAE,QACZ,CAAC,CAAC,CACF,IAAI,CAACnB,MAAM,CAAG,GAAI,CAAA1B,KAAK,CAAC8C,IAAI,CAACnB,QAAQ,CAAE,IAAI,CAACI,QAAQ,CAAC,CACrD,IAAI,CAACR,KAAK,CAACwB,GAAG,CAAC,IAAI,CAACrB,MAAM,CAAC,CAE3B;AACA,IAAI,CAACM,KAAK,CAAG,GAAI,CAAAhC,KAAK,CAACgD,gBAAgB,CAAC,QAAQ,CAAE,CAAC,CAAC,CACpD,IAAI,CAAChB,KAAK,CAACiB,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAChC,IAAI,CAAC3B,KAAK,CAACwB,GAAG,CAAC,IAAI,CAACf,KAAK,CAAC,CAE1B;AACA,IAAI,CAACR,MAAM,CAACyB,QAAQ,CAACE,CAAC,CAAG,CAAC,CAE1B,IAAI,CAAClB,aAAa,CAAG,KAAK,CAC5B,CAEAmB,IAAIA,CAACC,WAAuB,CAAE,CAC5B;AACA,GAAI,CAAAC,GAAG,CAAG,CAAC,CACX,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,WAAW,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CAC3CD,GAAG,EAAID,WAAW,CAACE,CAAC,CAAC,CACvB,CACA,KAAM,CAAAE,OAAO,CAAGH,GAAG,CAAGD,WAAW,CAACG,MAAM,CACxC,KAAM,CAAAE,iBAAiB,CAAGD,OAAO,CAAG,GAAG,CAEvC;AACA,IAAI,CAAC/B,MAAM,CAACiC,QAAQ,CAACC,CAAC,EAAI,IAAI,CAAC3B,aAAa,CAC5C,IAAI,CAACP,MAAM,CAACiC,QAAQ,CAACE,CAAC,EAAI,IAAI,CAAC5B,aAAa,CAE5C;AACA,KAAM,CAAA6B,KAAK,CAAG,CAAC,CAAGJ,iBAAiB,CAAG,GAAG,CACzC,IAAI,CAAChC,MAAM,CAACoC,KAAK,CAACZ,GAAG,CAACY,KAAK,CAAEA,KAAK,CAAEA,KAAK,CAAC,CAE1C;AACA,KAAM,CAAAC,GAAG,CAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,KAAK,CAAI,CAAC,CACpC,KAAM,CAAAtB,KAAK,CAAG,GAAI,CAAA3C,KAAK,CAACkE,KAAK,CAAC,CAAC,CAACC,MAAM,CAACJ,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CACrD,IAAI,CAAChC,QAAQ,CAACY,KAAK,CAAGA,KAAK,CAE3B;AACA,IAAI,CAAClB,QAAQ,CAAC2C,MAAM,CAAC,IAAI,CAAC7C,KAAK,CAAE,IAAI,CAACC,MAAM,CAAC,CAC/C,CAEA6C,OAAOA,CAAA,CAAG,CACR,IAAI,CAAC5C,QAAQ,CAAC4C,OAAO,CAAC,CAAC,CACvB,IAAI,CAACtC,QAAQ,CAACsC,OAAO,CAAC,CAAC,CACvB,IAAI,CAAC3C,MAAM,CAACC,QAAQ,CAAC0C,OAAO,CAAC,CAAC,CAChC,CACF,CAEA;AAQA,MAAO,MAAM,CAAAC,iBAAkB,CAM7BjD,WAAWA,CAACC,MAAyB,CAAkC,IAAhC,CAAAM,OAAyB,CAAA2C,SAAA,CAAAf,MAAA,IAAAe,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,CAAC,CAAC,MAL7DjD,MAAM,aACNmD,GAAG,aACH7C,OAAO,aACP8C,OAAO,CAAiB,EAAE,CAGhC,IAAI,CAACpD,MAAM,CAAGA,MAAM,CACpB,IAAI,CAACmD,GAAG,CAAGnD,MAAM,CAACqD,UAAU,CAAC,IAAI,CAAE,CAEnC,IAAI,CAAC/C,OAAO,CAAG,CACbgD,UAAU,CAAEhD,OAAO,CAACgD,UAAU,EAAI,SAAS,CAC3CC,QAAQ,CAAEjD,OAAO,CAACiD,QAAQ,EAAI,SAAS,CACvCC,SAAS,CAAElD,OAAO,CAACkD,SAAS,EAAI,IAAI,CACpCC,UAAU,CAAEnD,OAAO,CAACmD,UAAU,EAAI,GACpC,CAAC,CACH,CAEAC,MAAMA,CAAC3B,WAAuB,CAAQ,CACpC;AACA,IAAI,CAACqB,OAAO,CAACO,OAAO,CAAC,GAAI,CAAAC,UAAU,CAAC7B,WAAW,CAAC,CAAC,CAEjD;AACA,GAAI,IAAI,CAACqB,OAAO,CAAClB,MAAM,CAAG,IAAI,CAAC5B,OAAO,CAACmD,UAAU,CAAE,CACjD,IAAI,CAACL,OAAO,CAACS,GAAG,CAAC,CAAC,CACpB,CAEA;AACA,IAAI,CAACV,GAAG,CAACW,SAAS,CAAC,CAAC,CAAE,CAAC,CAAE,IAAI,CAAC9D,MAAM,CAACc,KAAK,CAAE,IAAI,CAACd,MAAM,CAACe,MAAM,CAAC,CAE/D;AACA,KAAM,CAAAgD,SAAS,CAAG,IAAI,CAAC/D,MAAM,CAACe,MAAM,CAAG,IAAI,CAACT,OAAO,CAACmD,UAAU,CAE9D;AACA,IAAI,CAACL,OAAO,CAACY,OAAO,CAAC,CAACC,KAAK,CAAEC,KAAK,GAAK,CACrC,KAAM,CAAA3B,CAAC,CAAG2B,KAAK,CAAGH,SAAS,CAE3B;AACA,KAAM,CAAAI,QAAQ,CAAG,IAAI,CAACnE,MAAM,CAACc,KAAK,CAAGmD,KAAK,CAAC/B,MAAM,CAEjD,IAAK,GAAI,CAAAD,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGgC,KAAK,CAAC/B,MAAM,CAAED,CAAC,EAAE,CAAE,CACrC,KAAM,CAAAmC,KAAK,CAAGH,KAAK,CAAChC,CAAC,CAAC,CAAG,GAAG,CAC5B,KAAM,CAAAK,CAAC,CAAGL,CAAC,CAAGkC,QAAQ,CAEtB;AACA,KAAM,CAAAE,SAAS,CAAG,CAAC,CAAIH,KAAK,CAAG,IAAI,CAAC5D,OAAO,CAACmD,UAAW,CACvD,KAAM,CAAApC,KAAK,CAAG1C,gBAAgB,CAC5B,IAAI,CAAC2B,OAAO,CAACgD,UAAU,CACvB,IAAI,CAAChD,OAAO,CAACiD,QAAQ,CACrBa,KACF,CAAC,CAED;AACA,IAAI,CAACjB,GAAG,CAACmB,SAAS,CAAGjD,KAAK,CAC1B,IAAI,CAAC8B,GAAG,CAACoB,WAAW,CAAGF,SAAS,CAEhC;AACA,IAAI,CAAClB,GAAG,CAACqB,QAAQ,CAAClC,CAAC,CAAEC,CAAC,CAAE4B,QAAQ,CAAEJ,SAAS,CAAC,CAC9C,CACF,CAAC,CAAC,CAEF;AACA,IAAI,CAACZ,GAAG,CAACoB,WAAW,CAAG,CAAC,CAC1B,CAEA;AACAzC,IAAIA,CAACC,WAAuB,CAAQ,CAClC,IAAI,CAAC2B,MAAM,CAAC3B,WAAW,CAAC,CAC1B,CAEA0C,MAAMA,CAAC3D,KAAa,CAAEC,MAAc,CAAQ,CAC1C,IAAI,CAACf,MAAM,CAACc,KAAK,CAAGA,KAAK,CACzB,IAAI,CAACd,MAAM,CAACe,MAAM,CAAGA,MAAM,CAC7B,CAEA;AACAgC,OAAOA,CAAA,CAAS,CACd,IAAI,CAACK,OAAO,CAAG,EAAE,CACnB,CACF,CAEA;AAoBA,MAAO,MAAM,CAAAsB,SAAU,CASrB3E,WAAWA,CAACC,MAAyB,CAAkC,IAAhC,CAAAM,OAAyB,CAAA2C,SAAA,CAAAf,MAAA,IAAAe,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,CAAC,CAAC,MAR7DjD,MAAM,aACNmD,GAAG,aACHwB,KAAK,CAAW,EAAE,MAClBrE,OAAO,aACP+B,QAAQ,CAAW,CAAC,MACpBuC,OAAO,aACPC,OAAO,QAGb,IAAI,CAAC7E,MAAM,CAAGA,MAAM,CACpB,IAAI,CAACmD,GAAG,CAAGnD,MAAM,CAACqD,UAAU,CAAC,IAAI,CAAE,CAEnC,IAAI,CAAC/C,OAAO,CAAG,CACbwE,SAAS,CAAExE,OAAO,CAACwE,SAAS,EAAI,GAAG,CACnCxB,UAAU,CAAEhD,OAAO,CAACgD,UAAU,EAAI,SAAS,CAC3CC,QAAQ,CAAEjD,OAAO,CAACiD,QAAQ,EAAI,SAAS,CACvCwB,QAAQ,CAAEzE,OAAO,CAACyE,QAAQ,EAAI,GAAG,CACjCC,OAAO,CAAE1E,OAAO,CAAC0E,OAAO,EAAI,CAAC,CAC7BC,OAAO,CAAE3E,OAAO,CAAC2E,OAAO,EAAI,CAC9B,CAAC,CAED,IAAI,CAACL,OAAO,CAAG,IAAI,CAAC5E,MAAM,CAACc,KAAK,CAAG,CAAC,CACpC,IAAI,CAAC+D,OAAO,CAAG,IAAI,CAAC7E,MAAM,CAACe,MAAM,CAAG,CAAC,CAErC;AACA,IAAI,CAACmE,SAAS,CAAC,CAAC,CAEhB;AACAC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,CAAE,IAAM,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAC9D,CAEQH,SAASA,CAAA,CAAS,CACxB,IAAI,CAACP,KAAK,CAAG,EAAE,CACf,IAAI,CAACC,OAAO,CAAG,IAAI,CAAC5E,MAAM,CAACc,KAAK,CAAG,CAAC,CACpC,IAAI,CAAC+D,OAAO,CAAG,IAAI,CAAC7E,MAAM,CAACe,MAAM,CAAG,CAAC,CAErC,KAAM,CAAAuE,SAAS,CAAG9F,IAAI,CAAC+F,IAAI,CACzB/F,IAAI,CAACgG,GAAG,CAAC,IAAI,CAACxF,MAAM,CAACc,KAAK,CAAE,CAAC,CAAC,CAAGtB,IAAI,CAACgG,GAAG,CAAC,IAAI,CAACxF,MAAM,CAACe,MAAM,CAAE,CAAC,CACjE,CAAC,CAAG,CAAC,CAEL,IAAK,GAAI,CAAAkB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,IAAI,CAAC3B,OAAO,CAACwE,SAAS,CAAE7C,CAAC,EAAE,CAAE,CAC/C;AACA,KAAM,CAAAwD,KAAK,CAAGjG,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAGlG,IAAI,CAACmG,EAAE,CAAG,CAAC,CACzC,KAAM,CAAAC,MAAM,CAAGpG,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAGJ,SAAS,CAExC;AACA,KAAM,CAAAhD,CAAC,CAAG,IAAI,CAACsC,OAAO,CAAGpF,IAAI,CAACqG,GAAG,CAACJ,KAAK,CAAC,CAAGG,MAAM,CACjD,KAAM,CAAArD,CAAC,CAAG,IAAI,CAACsC,OAAO,CAAGrF,IAAI,CAACsG,GAAG,CAACL,KAAK,CAAC,CAAGG,MAAM,CAEjD;AACA,IAAI,CAACjB,KAAK,CAACoB,IAAI,CAAC,CACdzD,CAAC,CACDC,CAAC,CACDyD,IAAI,CAAE,IAAI,CAAC1F,OAAO,CAAC0E,OAAO,CAAGxF,IAAI,CAACkG,MAAM,CAAC,CAAC,EAAI,IAAI,CAACpF,OAAO,CAAC2E,OAAO,CAAG,IAAI,CAAC3E,OAAO,CAAC0E,OAAO,CAAC,CAC1F3D,KAAK,CAAE1C,gBAAgB,CACrB,IAAI,CAAC2B,OAAO,CAACgD,UAAU,CACvB,IAAI,CAAChD,OAAO,CAACiD,QAAQ,CACrB/D,IAAI,CAACkG,MAAM,CAAC,CACd,CAAC,CACDO,KAAK,CAAE,CAAC,GAAG,CAAGzG,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAG,IAAI,CAACpF,OAAO,CAACyE,QAAQ,GAAKa,MAAM,CAAGN,SAAS,CAAC,CAC3EY,UAAU,CAAE,GAAG,CAAG1G,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAG,GAAG,CACrCS,WAAW,CAAE,GAAG,CAAG3G,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAG,GACrC,CAAC,CAAC,CACJ,CACF,CAEAhC,MAAMA,CAAC3B,WAAuB,CAAQ,CACpC;AACA,GAAI,CAAAC,GAAG,CAAG,CAAC,CACX,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,WAAW,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CAC3CD,GAAG,EAAID,WAAW,CAACE,CAAC,CAAC,CACvB,CACA,KAAM,CAAAmE,SAAS,CAAGpE,GAAG,CAAGD,WAAW,CAACG,MAAM,CAAG,GAAG,CAEhD;AACA,IAAI,CAACiB,GAAG,CAACmB,SAAS,CAAG,MAAM,CAC3B,IAAI,CAACnB,GAAG,CAACqB,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAE,IAAI,CAACxE,MAAM,CAACc,KAAK,CAAE,IAAI,CAACd,MAAM,CAACe,MAAM,CAAC,CAE9D;AACA,IAAI,CAACsB,QAAQ,EAAI,KAAK,CAAG+D,SAAS,CAAG,IAAI,CAEzC;AACA,IAAI,CAACzB,KAAK,CAACX,OAAO,CAAC,CAACqC,IAAI,CAAEnC,KAAK,GAAK,CAClC;AACA,KAAM,CAAAoC,SAAS,CAAG9G,IAAI,CAAC+G,KAAK,CAAErC,KAAK,CAAG,IAAI,CAACS,KAAK,CAACzC,MAAM,CAAIH,WAAW,CAACG,MAAM,CAAC,CAC9E,KAAM,CAAAsE,SAAS,CAAGzE,WAAW,CAACuE,SAAS,CAAC,CAAG,GAAG,CAE9C;AACA,KAAM,CAAAG,EAAE,CAAGJ,IAAI,CAAC/D,CAAC,CAAG,IAAI,CAACsC,OAAO,CAChC,KAAM,CAAA8B,EAAE,CAAGL,IAAI,CAAC9D,CAAC,CAAG,IAAI,CAACsC,OAAO,CAChC,KAAM,CAAA8B,QAAQ,CAAGnH,IAAI,CAAC+F,IAAI,CAACkB,EAAE,CAAGA,EAAE,CAAGC,EAAE,CAAGA,EAAE,CAAC,CAE7C;AACA,KAAM,CAAAjB,KAAK,CAAGjG,IAAI,CAACoH,KAAK,CAACF,EAAE,CAAED,EAAE,CAAC,CAAG,IAAI,CAACpE,QAAQ,CAAGgE,IAAI,CAACJ,KAAK,CAC7D,KAAM,CAAAY,WAAW,CAAGF,QAAQ,CAAIP,SAAS,CAAG,EAAE,CAAGC,IAAI,CAACF,WAAY,CAAG,EAAE,CAEvE;AACAE,IAAI,CAAC/D,CAAC,CAAG,IAAI,CAACsC,OAAO,CAAGpF,IAAI,CAACqG,GAAG,CAACJ,KAAK,CAAC,CAAGoB,WAAW,CACrDR,IAAI,CAAC9D,CAAC,CAAG,IAAI,CAACsC,OAAO,CAAGrF,IAAI,CAACsG,GAAG,CAACL,KAAK,CAAC,CAAGoB,WAAW,CAErD;AACA,GACER,IAAI,CAAC/D,CAAC,CAAG,CAAC,EACV+D,IAAI,CAAC/D,CAAC,CAAG,IAAI,CAACtC,MAAM,CAACc,KAAK,EAC1BuF,IAAI,CAAC9D,CAAC,CAAG,CAAC,EACV8D,IAAI,CAAC9D,CAAC,CAAG,IAAI,CAACvC,MAAM,CAACe,MAAM,CAC3B,CACA,KAAM,CAAA+F,QAAQ,CAAGtH,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAGlG,IAAI,CAACmG,EAAE,CAAG,CAAC,CAC5C,KAAM,CAAAL,SAAS,CAAG9F,IAAI,CAAC+F,IAAI,CACzB/F,IAAI,CAACgG,GAAG,CAAC,IAAI,CAACxF,MAAM,CAACc,KAAK,CAAE,CAAC,CAAC,CAAGtB,IAAI,CAACgG,GAAG,CAAC,IAAI,CAACxF,MAAM,CAACe,MAAM,CAAE,CAAC,CACjE,CAAC,CAAG,CAAC,CACL,KAAM,CAAAgG,SAAS,CAAGvH,IAAI,CAACkG,MAAM,CAAC,CAAC,CAAGJ,SAAS,CAE3Ce,IAAI,CAAC/D,CAAC,CAAG,IAAI,CAACsC,OAAO,CAAGpF,IAAI,CAACqG,GAAG,CAACiB,QAAQ,CAAC,CAAGC,SAAS,CACtDV,IAAI,CAAC9D,CAAC,CAAG,IAAI,CAACsC,OAAO,CAAGrF,IAAI,CAACsG,GAAG,CAACgB,QAAQ,CAAC,CAAGC,SAAS,CACxD,CAEA;AACA,KAAM,CAAAb,UAAU,CAAGG,IAAI,CAACH,UAAU,CAAGM,SAAS,CAAG,GAAG,CACpD,KAAM,CAAAR,IAAI,CAAGK,IAAI,CAACL,IAAI,EAAI,CAAC,CAAGQ,SAAS,CAAG,CAAC,CAAC,CAE5C;AACA,IAAI,CAACrD,GAAG,CAACmB,SAAS,CAAG+B,IAAI,CAAChF,KAAK,CAC/B,IAAI,CAAC8B,GAAG,CAACoB,WAAW,CAAG2B,UAAU,CACjC,IAAI,CAAC/C,GAAG,CAAC6D,SAAS,CAAC,CAAC,CACpB,IAAI,CAAC7D,GAAG,CAAC8D,GAAG,CAACZ,IAAI,CAAC/D,CAAC,CAAE+D,IAAI,CAAC9D,CAAC,CAAEyD,IAAI,CAAE,CAAC,CAAExG,IAAI,CAACmG,EAAE,CAAG,CAAC,CAAC,CAClD,IAAI,CAACxC,GAAG,CAAC+D,IAAI,CAAC,CAAC,CAEf;AACA,GAAIV,SAAS,CAAG,GAAG,CAAE,CACnB,IAAI,CAACrD,GAAG,CAACoB,WAAW,CAAG2B,UAAU,CAAG,GAAG,CACvC,IAAI,CAAC/C,GAAG,CAAC6D,SAAS,CAAC,CAAC,CACpB,IAAI,CAAC7D,GAAG,CAAC8D,GAAG,CAACZ,IAAI,CAAC/D,CAAC,CAAE+D,IAAI,CAAC9D,CAAC,CAAEyD,IAAI,CAAG,CAAC,CAAE,CAAC,CAAExG,IAAI,CAACmG,EAAE,CAAG,CAAC,CAAC,CACtD,IAAI,CAACxC,GAAG,CAAC+D,IAAI,CAAC,CAAC,CACjB,CACF,CAAC,CAAC,CAEF;AACA,IAAI,CAAC/D,GAAG,CAACoB,WAAW,CAAG,CAAC,CAC1B,CAEA;AACAzC,IAAIA,CAACC,WAAuB,CAAQ,CAClC,IAAI,CAAC2B,MAAM,CAAC3B,WAAW,CAAC,CAC1B,CAEAsD,YAAYA,CAAA,CAAS,CACnB,IAAI,CAACT,OAAO,CAAG,IAAI,CAAC5E,MAAM,CAACc,KAAK,CAAG,CAAC,CACpC,IAAI,CAAC+D,OAAO,CAAG,IAAI,CAAC7E,MAAM,CAACe,MAAM,CAAG,CAAC,CACvC,CAEA0D,MAAMA,CAAC3D,KAAa,CAAEC,MAAc,CAAQ,CAC1C,IAAI,CAACf,MAAM,CAACc,KAAK,CAAGA,KAAK,CACzB,IAAI,CAACd,MAAM,CAACe,MAAM,CAAGA,MAAM,CAC3B,IAAI,CAACmE,SAAS,CAAC,CAAC,CAClB,CAEA;AACAnC,OAAOA,CAAA,CAAS,CACd,IAAI,CAAC4B,KAAK,CAAG,EAAE,CACfQ,MAAM,CAACgC,mBAAmB,CAAC,QAAQ,CAAE,IAAM,IAAI,CAAC9B,YAAY,CAAC,CAAC,CAAC,CACjE,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}