{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20213\\\\Desktop\\\\web\\\\src\\\\context\\\\AudioContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\n\n// 音频数据类型定义\n\n// 音频上下文接口\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 创建上下文\nconst AudioContext = /*#__PURE__*/createContext(undefined);\n\n// Provider组件\nexport function AudioProvider({\n  children\n}) {\n  _s();\n  // 音频元素和分析器\n  const audioRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const sourceRef = useRef(null);\n\n  // 状态\n  const [audioData, setAudioData] = useState({\n    ready: false,\n    frequencies: new Uint8Array(),\n    waveform: new Float32Array(),\n    volume: 0\n  });\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(0.7);\n\n  // 初始化音频元素\n  useEffect(() => {\n    audioRef.current = new Audio();\n    audioRef.current.crossOrigin = 'anonymous';\n\n    // 监听事件\n    const audio = audioRef.current;\n    const handleTimeUpdate = () => {\n      setCurrentTime(audio.currentTime);\n    };\n    const handleLoadedMetadata = () => {\n      setDuration(audio.duration);\n    };\n    const handleEnded = () => {\n      setIsPlaying(false);\n    };\n    audio.addEventListener('timeupdate', handleTimeUpdate);\n    audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n    audio.addEventListener('ended', handleEnded);\n\n    // 清理\n    return () => {\n      audio.removeEventListener('timeupdate', handleTimeUpdate);\n      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      audio.removeEventListener('ended', handleEnded);\n      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  // 设置音量\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = volume;\n    }\n  }, [volume]);\n\n  // 创建音频分析器\n  const setupAnalyser = () => {\n    if (!audioRef.current) return;\n\n    // 如果已经存在，先清理\n    if (sourceRef.current) {\n      sourceRef.current.disconnect();\n    }\n    if (!audioContextRef.current) {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    }\n    analyserRef.current = audioContextRef.current.createAnalyser();\n    analyserRef.current.fftSize = 2048;\n    sourceRef.current = audioContextRef.current.createMediaElementSource(audioRef.current);\n    sourceRef.current.connect(analyserRef.current);\n    analyserRef.current.connect(audioContextRef.current.destination);\n\n    // 初始化数据数组\n    const frequenciesArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    const waveformArray = new Float32Array(analyserRef.current.frequencyBinCount);\n    setAudioData({\n      ready: true,\n      frequencies: frequenciesArray,\n      waveform: waveformArray,\n      volume: 0\n    });\n\n    // 开始动画帧更新\n    updateAudioData();\n  };\n\n  // 更新音频数据\n  const updateAudioData = () => {\n    if (!analyserRef.current || !isPlaying) return;\n    const frequencies = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(frequencies);\n    const waveform = new Float32Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getFloatTimeDomainData(waveform);\n\n    // 计算音量\n    let sum = 0;\n    for (let i = 0; i < frequencies.length; i++) {\n      sum += frequencies[i];\n    }\n    const averageVolume = sum / frequencies.length / 255;\n    setAudioData({\n      ready: true,\n      frequencies,\n      waveform,\n      volume: averageVolume\n    });\n\n    // 继续下一帧\n    requestAnimationFrame(updateAudioData);\n  };\n\n  // 加载音频文件\n  const loadAudio = file => {\n    if (!audioRef.current) return;\n    const url = URL.createObjectURL(file);\n    audioRef.current.src = url;\n    audioRef.current.load();\n\n    // 准备好后设置分析器\n    audioRef.current.oncanplaythrough = () => {\n      setupAnalyser();\n    };\n  };\n\n  // 从URL加载音频\n  const loadAudioFromUrl = url => {\n    if (!audioRef.current) return;\n    audioRef.current.src = url;\n    audioRef.current.load();\n\n    // 准备好后设置分析器\n    audioRef.current.oncanplaythrough = () => {\n      setupAnalyser();\n    };\n  };\n\n  // 播放音频\n  const play = () => {\n    if (!audioRef.current || !audioData.ready) return;\n\n    // 如果AudioContext被暂停，需要恢复\n    if (audioContextRef.current && audioContextRef.current.state === 'suspended') {\n      audioContextRef.current.resume();\n    }\n    audioRef.current.play().then(() => {\n      setIsPlaying(true);\n      // 开始分析\n      updateAudioData();\n    }).catch(error => {\n      console.error('播放出错:', error);\n    });\n  };\n\n  // 暂停音频\n  const pause = () => {\n    if (!audioRef.current) return;\n    audioRef.current.pause();\n    setIsPlaying(false);\n  };\n\n  // 停止音频\n  const stop = () => {\n    if (!audioRef.current) return;\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n    setIsPlaying(false);\n  };\n\n  // 跳转到指定时间\n  const seek = time => {\n    if (!audioRef.current) return;\n    audioRef.current.currentTime = time;\n  };\n\n  // 提供上下文值\n  const contextValue = {\n    audioData,\n    isPlaying,\n    currentTime,\n    duration,\n    volume,\n    loadAudio,\n    loadAudioFromUrl,\n    play,\n    pause,\n    stop,\n    setVolume,\n    seek\n  };\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n\n// 使用上下文的Hook\n_s(AudioProvider, \"12Tkjbvb9MgskhpSINVD0IPkm5o=\");\n_c = AudioProvider;\nexport function useAudioContext() {\n  _s2();\n  const context = useContext(AudioContext);\n  if (context === undefined) {\n    throw new Error('useAudioContext must be used within an AudioProvider');\n  }\n  return context;\n}\n\n// 迷你播放器组件，固定在屏幕底部\n_s2(useAudioContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MiniPlayer = () => {\n  _s3();\n  const {\n    isPlaying,\n    currentTrack,\n    play,\n    pause,\n    currentTime,\n    duration,\n    seek,\n    volume,\n    setVolume\n  } = useAudioContext();\n\n  // 如果没有正在播放的曲目，不显示迷你播放器\n  if (!currentTrack) return null;\n\n  // 格式化时间显示\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n\n  // 计算进度百分比\n  const progressPercent = (currentTime / duration * 100 || 0) + '%';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(26, 26, 26, 0.95)',\n      padding: '10px 20px',\n      zIndex: 1000,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      backdropFilter: 'blur(10px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isPlaying ? pause : play,\n        style: {\n          backgroundColor: '#9c27b0',\n          color: 'white',\n          border: 'none',\n          borderRadius: '50%',\n          width: '36px',\n          height: '36px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer'\n        },\n        children: isPlaying ? '❚❚' : '▶'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'white',\n            fontSize: '0.9rem',\n            marginBottom: '4px'\n          },\n          children: currentTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#aaa',\n            fontSize: '0.8rem'\n          },\n          children: [formatTime(currentTime), \" / \", formatTime(duration)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: '0 20px',\n        cursor: 'pointer'\n      },\n      onClick: e => {\n        const rect = e.currentTarget.getBoundingClientRect();\n        const offsetX = e.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        seek(percentage * duration);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '4px',\n          backgroundColor: '#333',\n          borderRadius: '2px',\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            height: '100%',\n            width: progressPercent,\n            backgroundColor: '#ba68c8',\n            borderRadius: '2px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px',\n        width: '120px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#aaa',\n          fontSize: '0.8rem'\n        },\n        children: [Math.round(volume * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.01\",\n        value: volume,\n        onChange: e => setVolume(parseFloat(e.target.value)),\n        style: {\n          width: '80px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s3(MiniPlayer, \"G/ebnUy89E8Xz6eJWo2vfWxp7bw=\", false, function () {\n  return [useAudioContext];\n});\n_c2 = MiniPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioProvider\");\n$RefreshReg$(_c2, \"MiniPlayer\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","AudioContext","undefined","AudioProvider","children","_s","audioRef","audioContextRef","analyserRef","sourceRef","audioData","setAudioData","ready","frequencies","Uint8Array","waveform","Float32Array","volume","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","setVolume","current","Audio","crossOrigin","audio","handleTimeUpdate","handleLoadedMetadata","handleEnded","addEventListener","removeEventListener","state","close","setupAnalyser","disconnect","window","webkitAudioContext","createAnalyser","fftSize","createMediaElementSource","connect","destination","frequenciesArray","frequencyBinCount","waveformArray","updateAudioData","getByteFrequencyData","getFloatTimeDomainData","sum","i","length","averageVolume","requestAnimationFrame","loadAudio","file","url","URL","createObjectURL","src","load","oncanplaythrough","loadAudioFromUrl","play","resume","then","catch","error","console","pause","stop","seek","time","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAudioContext","_s2","context","Error","MiniPlayer","_s3","currentTrack","formatTime","minutes","Math","floor","seconds","progressPercent","style","position","bottom","left","right","backgroundColor","padding","zIndex","display","alignItems","justifyContent","backdropFilter","gap","onClick","color","border","borderRadius","width","height","cursor","fontSize","marginBottom","flex","e","rect","currentTarget","getBoundingClientRect","offsetX","clientX","percentage","top","round","type","min","max","step","onChange","parseFloat","target","_c2","$RefreshReg$"],"sources":["C:/Users/20213/Desktop/web/src/context/AudioContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\r\n\r\n// 音频数据类型定义\r\ninterface AudioData {\r\n  ready: boolean;\r\n  frequencies: Uint8Array;\r\n  waveform: Float32Array;\r\n  volume: number;\r\n}\r\n\r\n// 音频上下文接口\r\ninterface AudioContextType {\r\n  audioData: AudioData;\r\n  isPlaying: boolean;\r\n  currentTime: number;\r\n  duration: number;\r\n  volume: number;\r\n  loadAudio: (file: File) => void;\r\n  loadAudioFromUrl: (url: string) => void;\r\n  play: () => void;\r\n  pause: () => void;\r\n  stop: () => void;\r\n  setVolume: (value: number) => void;\r\n  seek: (time: number) => void;\r\n}\r\n\r\n// 创建上下文\r\nconst AudioContext = createContext<AudioContextType | undefined>(undefined);\r\n\r\n// Provider组件\r\nexport function AudioProvider({ children }: { children: React.ReactNode }) {\r\n  // 音频元素和分析器\r\n  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const sourceRef = useRef<MediaElementAudioSourceNode | null>(null);\r\n  \r\n  // 状态\r\n  const [audioData, setAudioData] = useState<AudioData>({\r\n    ready: false,\r\n    frequencies: new Uint8Array(),\r\n    waveform: new Float32Array(),\r\n    volume: 0,\r\n  });\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [volume, setVolume] = useState(0.7);\r\n  \r\n  // 初始化音频元素\r\n  useEffect(() => {\r\n    audioRef.current = new Audio();\r\n    audioRef.current.crossOrigin = 'anonymous';\r\n    \r\n    // 监听事件\r\n    const audio = audioRef.current;\r\n    \r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(audio.currentTime);\r\n    };\r\n    \r\n    const handleLoadedMetadata = () => {\r\n      setDuration(audio.duration);\r\n    };\r\n    \r\n    const handleEnded = () => {\r\n      setIsPlaying(false);\r\n    };\r\n    \r\n    audio.addEventListener('timeupdate', handleTimeUpdate);\r\n    audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n    audio.addEventListener('ended', handleEnded);\r\n    \r\n    // 清理\r\n    return () => {\r\n      audio.removeEventListener('timeupdate', handleTimeUpdate);\r\n      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n      audio.removeEventListener('ended', handleEnded);\r\n      \r\n      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\r\n        audioContextRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // 设置音量\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      audioRef.current.volume = volume;\r\n    }\r\n  }, [volume]);\r\n  \r\n  // 创建音频分析器\r\n  const setupAnalyser = () => {\r\n    if (!audioRef.current) return;\r\n    \r\n    // 如果已经存在，先清理\r\n    if (sourceRef.current) {\r\n      sourceRef.current.disconnect();\r\n    }\r\n    \r\n    if (!audioContextRef.current) {\r\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    }\r\n    \r\n    analyserRef.current = audioContextRef.current.createAnalyser();\r\n    analyserRef.current.fftSize = 2048;\r\n    \r\n    sourceRef.current = audioContextRef.current.createMediaElementSource(audioRef.current);\r\n    sourceRef.current.connect(analyserRef.current);\r\n    analyserRef.current.connect(audioContextRef.current.destination);\r\n    \r\n    // 初始化数据数组\r\n    const frequenciesArray = new Uint8Array(analyserRef.current.frequencyBinCount);\r\n    const waveformArray = new Float32Array(analyserRef.current.frequencyBinCount);\r\n    \r\n    setAudioData({\r\n      ready: true,\r\n      frequencies: frequenciesArray,\r\n      waveform: waveformArray,\r\n      volume: 0,\r\n    });\r\n    \r\n    // 开始动画帧更新\r\n    updateAudioData();\r\n  };\r\n  \r\n  // 更新音频数据\r\n  const updateAudioData = () => {\r\n    if (!analyserRef.current || !isPlaying) return;\r\n    \r\n    const frequencies = new Uint8Array(analyserRef.current.frequencyBinCount);\r\n    analyserRef.current.getByteFrequencyData(frequencies);\r\n    \r\n    const waveform = new Float32Array(analyserRef.current.frequencyBinCount);\r\n    analyserRef.current.getFloatTimeDomainData(waveform);\r\n    \r\n    // 计算音量\r\n    let sum = 0;\r\n    for (let i = 0; i < frequencies.length; i++) {\r\n      sum += frequencies[i];\r\n    }\r\n    const averageVolume = sum / frequencies.length / 255;\r\n    \r\n    setAudioData({\r\n      ready: true,\r\n      frequencies,\r\n      waveform,\r\n      volume: averageVolume,\r\n    });\r\n    \r\n    // 继续下一帧\r\n    requestAnimationFrame(updateAudioData);\r\n  };\r\n  \r\n  // 加载音频文件\r\n  const loadAudio = (file: File) => {\r\n    if (!audioRef.current) return;\r\n    \r\n    const url = URL.createObjectURL(file);\r\n    audioRef.current.src = url;\r\n    audioRef.current.load();\r\n    \r\n    // 准备好后设置分析器\r\n    audioRef.current.oncanplaythrough = () => {\r\n      setupAnalyser();\r\n    };\r\n  };\r\n  \r\n  // 从URL加载音频\r\n  const loadAudioFromUrl = (url: string) => {\r\n    if (!audioRef.current) return;\r\n    \r\n    audioRef.current.src = url;\r\n    audioRef.current.load();\r\n    \r\n    // 准备好后设置分析器\r\n    audioRef.current.oncanplaythrough = () => {\r\n      setupAnalyser();\r\n    };\r\n  };\r\n  \r\n  // 播放音频\r\n  const play = () => {\r\n    if (!audioRef.current || !audioData.ready) return;\r\n    \r\n    // 如果AudioContext被暂停，需要恢复\r\n    if (audioContextRef.current && audioContextRef.current.state === 'suspended') {\r\n      audioContextRef.current.resume();\r\n    }\r\n    \r\n    audioRef.current.play()\r\n      .then(() => {\r\n        setIsPlaying(true);\r\n        // 开始分析\r\n        updateAudioData();\r\n      })\r\n      .catch(error => {\r\n        console.error('播放出错:', error);\r\n      });\r\n  };\r\n  \r\n  // 暂停音频\r\n  const pause = () => {\r\n    if (!audioRef.current) return;\r\n    \r\n    audioRef.current.pause();\r\n    setIsPlaying(false);\r\n  };\r\n  \r\n  // 停止音频\r\n  const stop = () => {\r\n    if (!audioRef.current) return;\r\n    \r\n    audioRef.current.pause();\r\n    audioRef.current.currentTime = 0;\r\n    setIsPlaying(false);\r\n  };\r\n  \r\n  // 跳转到指定时间\r\n  const seek = (time: number) => {\r\n    if (!audioRef.current) return;\r\n    \r\n    audioRef.current.currentTime = time;\r\n  };\r\n  \r\n  // 提供上下文值\r\n  const contextValue: AudioContextType = {\r\n    audioData,\r\n    isPlaying,\r\n    currentTime,\r\n    duration,\r\n    volume,\r\n    loadAudio,\r\n    loadAudioFromUrl,\r\n    play,\r\n    pause,\r\n    stop,\r\n    setVolume,\r\n    seek,\r\n  };\r\n  \r\n  return (\r\n    <AudioContext.Provider value={contextValue}>\r\n      {children}\r\n    </AudioContext.Provider>\r\n  );\r\n}\r\n\r\n// 使用上下文的Hook\r\nexport function useAudioContext() {\r\n  const context = useContext(AudioContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAudioContext must be used within an AudioProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// 迷你播放器组件，固定在屏幕底部\r\nexport const MiniPlayer: React.FC = () => {\r\n  const { \r\n    isPlaying, \r\n    currentTrack, \r\n    play, \r\n    pause, \r\n    currentTime, \r\n    duration,\r\n    seek,\r\n    volume,\r\n    setVolume\r\n  } = useAudioContext();\r\n\r\n  // 如果没有正在播放的曲目，不显示迷你播放器\r\n  if (!currentTrack) return null;\r\n\r\n  // 格式化时间显示\r\n  const formatTime = (time: number) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n  };\r\n\r\n  // 计算进度百分比\r\n  const progressPercent = ((currentTime / duration) * 100 || 0) + '%';\r\n\r\n  return (\r\n    <div style={{\r\n      position: 'fixed',\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      backgroundColor: 'rgba(26, 26, 26, 0.95)',\r\n      padding: '10px 20px',\r\n      zIndex: 1000,\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      backdropFilter: 'blur(10px)'\r\n    }}>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n        <button \r\n          onClick={isPlaying ? pause : play}\r\n          style={{\r\n            backgroundColor: '#9c27b0',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '50%',\r\n            width: '36px',\r\n            height: '36px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          {isPlaying ? '❚❚' : '▶'}\r\n        </button>\r\n        <div>\r\n          <div style={{ color: 'white', fontSize: '0.9rem', marginBottom: '4px' }}>\r\n            {currentTrack}\r\n          </div>\r\n          <div style={{ color: '#aaa', fontSize: '0.8rem' }}>\r\n            {formatTime(currentTime)} / {formatTime(duration)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ flex: 1, padding: '0 20px', cursor: 'pointer' }} \r\n           onClick={(e) => {\r\n             const rect = e.currentTarget.getBoundingClientRect();\r\n             const offsetX = e.clientX - rect.left;\r\n             const percentage = offsetX / rect.width;\r\n             seek(percentage * duration);\r\n           }}>\r\n        <div style={{ \r\n          height: '4px', \r\n          backgroundColor: '#333',\r\n          borderRadius: '2px',\r\n          position: 'relative'\r\n        }}>\r\n          <div style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: progressPercent,\r\n            backgroundColor: '#ba68c8',\r\n            borderRadius: '2px'\r\n          }} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', width: '120px' }}>\r\n        <span style={{ color: '#aaa', fontSize: '0.8rem' }}>\r\n          {Math.round(volume * 100)}%\r\n        </span>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          value={volume}\r\n          onChange={(e) => setVolume(parseFloat(e.target.value))}\r\n          style={{ width: '80px' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}